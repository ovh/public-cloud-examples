// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ovh

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/ovh/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type CloudProjectDatabasePostgresqlConnectionPool struct {
	pulumi.CustomResourceState

	// Id of the database cluster
	ClusterId pulumi.StringOutput `pulumi:"clusterId"`
	// Database used for the connection pool
	DatabaseId pulumi.StringOutput `pulumi:"databaseId"`
	// Connection mode to the connection pool
	Mode pulumi.StringOutput `pulumi:"mode"`
	// Name of the connection pool
	Name pulumi.StringOutput `pulumi:"name"`
	// Port of the connection pool
	Port        pulumi.Float64Output   `pulumi:"port"`
	ServiceName pulumi.StringPtrOutput `pulumi:"serviceName"`
	// Size of the connection pool
	Size pulumi.Float64Output `pulumi:"size"`
	// SSL connection mode for the pool
	SslMode  pulumi.StringOutput                                           `pulumi:"sslMode"`
	Timeouts CloudProjectDatabasePostgresqlConnectionPoolTimeoutsPtrOutput `pulumi:"timeouts"`
	// Connection URI to the pool
	Uri pulumi.StringOutput `pulumi:"uri"`
	// Database user authorized to connect to the pool, if none all the users are allowed
	UserId pulumi.StringOutput `pulumi:"userId"`
}

// NewCloudProjectDatabasePostgresqlConnectionPool registers a new resource with the given unique name, arguments, and options.
func NewCloudProjectDatabasePostgresqlConnectionPool(ctx *pulumi.Context,
	name string, args *CloudProjectDatabasePostgresqlConnectionPoolArgs, opts ...pulumi.ResourceOption) (*CloudProjectDatabasePostgresqlConnectionPool, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterId == nil {
		return nil, errors.New("invalid value for required argument 'ClusterId'")
	}
	if args.DatabaseId == nil {
		return nil, errors.New("invalid value for required argument 'DatabaseId'")
	}
	if args.Mode == nil {
		return nil, errors.New("invalid value for required argument 'Mode'")
	}
	if args.Size == nil {
		return nil, errors.New("invalid value for required argument 'Size'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource CloudProjectDatabasePostgresqlConnectionPool
	err = ctx.RegisterPackageResource("ovh:index/cloudProjectDatabasePostgresqlConnectionPool:CloudProjectDatabasePostgresqlConnectionPool", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCloudProjectDatabasePostgresqlConnectionPool gets an existing CloudProjectDatabasePostgresqlConnectionPool resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCloudProjectDatabasePostgresqlConnectionPool(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CloudProjectDatabasePostgresqlConnectionPoolState, opts ...pulumi.ResourceOption) (*CloudProjectDatabasePostgresqlConnectionPool, error) {
	var resource CloudProjectDatabasePostgresqlConnectionPool
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("ovh:index/cloudProjectDatabasePostgresqlConnectionPool:CloudProjectDatabasePostgresqlConnectionPool", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CloudProjectDatabasePostgresqlConnectionPool resources.
type cloudProjectDatabasePostgresqlConnectionPoolState struct {
	// Id of the database cluster
	ClusterId *string `pulumi:"clusterId"`
	// Database used for the connection pool
	DatabaseId *string `pulumi:"databaseId"`
	// Connection mode to the connection pool
	Mode *string `pulumi:"mode"`
	// Name of the connection pool
	Name *string `pulumi:"name"`
	// Port of the connection pool
	Port        *float64 `pulumi:"port"`
	ServiceName *string  `pulumi:"serviceName"`
	// Size of the connection pool
	Size *float64 `pulumi:"size"`
	// SSL connection mode for the pool
	SslMode  *string                                               `pulumi:"sslMode"`
	Timeouts *CloudProjectDatabasePostgresqlConnectionPoolTimeouts `pulumi:"timeouts"`
	// Connection URI to the pool
	Uri *string `pulumi:"uri"`
	// Database user authorized to connect to the pool, if none all the users are allowed
	UserId *string `pulumi:"userId"`
}

type CloudProjectDatabasePostgresqlConnectionPoolState struct {
	// Id of the database cluster
	ClusterId pulumi.StringPtrInput
	// Database used for the connection pool
	DatabaseId pulumi.StringPtrInput
	// Connection mode to the connection pool
	Mode pulumi.StringPtrInput
	// Name of the connection pool
	Name pulumi.StringPtrInput
	// Port of the connection pool
	Port        pulumi.Float64PtrInput
	ServiceName pulumi.StringPtrInput
	// Size of the connection pool
	Size pulumi.Float64PtrInput
	// SSL connection mode for the pool
	SslMode  pulumi.StringPtrInput
	Timeouts CloudProjectDatabasePostgresqlConnectionPoolTimeoutsPtrInput
	// Connection URI to the pool
	Uri pulumi.StringPtrInput
	// Database user authorized to connect to the pool, if none all the users are allowed
	UserId pulumi.StringPtrInput
}

func (CloudProjectDatabasePostgresqlConnectionPoolState) ElementType() reflect.Type {
	return reflect.TypeOf((*cloudProjectDatabasePostgresqlConnectionPoolState)(nil)).Elem()
}

type cloudProjectDatabasePostgresqlConnectionPoolArgs struct {
	// Id of the database cluster
	ClusterId string `pulumi:"clusterId"`
	// Database used for the connection pool
	DatabaseId string `pulumi:"databaseId"`
	// Connection mode to the connection pool
	Mode string `pulumi:"mode"`
	// Name of the connection pool
	Name        *string `pulumi:"name"`
	ServiceName *string `pulumi:"serviceName"`
	// Size of the connection pool
	Size     float64                                               `pulumi:"size"`
	Timeouts *CloudProjectDatabasePostgresqlConnectionPoolTimeouts `pulumi:"timeouts"`
	// Database user authorized to connect to the pool, if none all the users are allowed
	UserId *string `pulumi:"userId"`
}

// The set of arguments for constructing a CloudProjectDatabasePostgresqlConnectionPool resource.
type CloudProjectDatabasePostgresqlConnectionPoolArgs struct {
	// Id of the database cluster
	ClusterId pulumi.StringInput
	// Database used for the connection pool
	DatabaseId pulumi.StringInput
	// Connection mode to the connection pool
	Mode pulumi.StringInput
	// Name of the connection pool
	Name        pulumi.StringPtrInput
	ServiceName pulumi.StringPtrInput
	// Size of the connection pool
	Size     pulumi.Float64Input
	Timeouts CloudProjectDatabasePostgresqlConnectionPoolTimeoutsPtrInput
	// Database user authorized to connect to the pool, if none all the users are allowed
	UserId pulumi.StringPtrInput
}

func (CloudProjectDatabasePostgresqlConnectionPoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cloudProjectDatabasePostgresqlConnectionPoolArgs)(nil)).Elem()
}

type CloudProjectDatabasePostgresqlConnectionPoolInput interface {
	pulumi.Input

	ToCloudProjectDatabasePostgresqlConnectionPoolOutput() CloudProjectDatabasePostgresqlConnectionPoolOutput
	ToCloudProjectDatabasePostgresqlConnectionPoolOutputWithContext(ctx context.Context) CloudProjectDatabasePostgresqlConnectionPoolOutput
}

func (*CloudProjectDatabasePostgresqlConnectionPool) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudProjectDatabasePostgresqlConnectionPool)(nil)).Elem()
}

func (i *CloudProjectDatabasePostgresqlConnectionPool) ToCloudProjectDatabasePostgresqlConnectionPoolOutput() CloudProjectDatabasePostgresqlConnectionPoolOutput {
	return i.ToCloudProjectDatabasePostgresqlConnectionPoolOutputWithContext(context.Background())
}

func (i *CloudProjectDatabasePostgresqlConnectionPool) ToCloudProjectDatabasePostgresqlConnectionPoolOutputWithContext(ctx context.Context) CloudProjectDatabasePostgresqlConnectionPoolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudProjectDatabasePostgresqlConnectionPoolOutput)
}

type CloudProjectDatabasePostgresqlConnectionPoolOutput struct{ *pulumi.OutputState }

func (CloudProjectDatabasePostgresqlConnectionPoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudProjectDatabasePostgresqlConnectionPool)(nil)).Elem()
}

func (o CloudProjectDatabasePostgresqlConnectionPoolOutput) ToCloudProjectDatabasePostgresqlConnectionPoolOutput() CloudProjectDatabasePostgresqlConnectionPoolOutput {
	return o
}

func (o CloudProjectDatabasePostgresqlConnectionPoolOutput) ToCloudProjectDatabasePostgresqlConnectionPoolOutputWithContext(ctx context.Context) CloudProjectDatabasePostgresqlConnectionPoolOutput {
	return o
}

// Id of the database cluster
func (o CloudProjectDatabasePostgresqlConnectionPoolOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudProjectDatabasePostgresqlConnectionPool) pulumi.StringOutput { return v.ClusterId }).(pulumi.StringOutput)
}

// Database used for the connection pool
func (o CloudProjectDatabasePostgresqlConnectionPoolOutput) DatabaseId() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudProjectDatabasePostgresqlConnectionPool) pulumi.StringOutput { return v.DatabaseId }).(pulumi.StringOutput)
}

// Connection mode to the connection pool
func (o CloudProjectDatabasePostgresqlConnectionPoolOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudProjectDatabasePostgresqlConnectionPool) pulumi.StringOutput { return v.Mode }).(pulumi.StringOutput)
}

// Name of the connection pool
func (o CloudProjectDatabasePostgresqlConnectionPoolOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudProjectDatabasePostgresqlConnectionPool) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Port of the connection pool
func (o CloudProjectDatabasePostgresqlConnectionPoolOutput) Port() pulumi.Float64Output {
	return o.ApplyT(func(v *CloudProjectDatabasePostgresqlConnectionPool) pulumi.Float64Output { return v.Port }).(pulumi.Float64Output)
}

func (o CloudProjectDatabasePostgresqlConnectionPoolOutput) ServiceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CloudProjectDatabasePostgresqlConnectionPool) pulumi.StringPtrOutput { return v.ServiceName }).(pulumi.StringPtrOutput)
}

// Size of the connection pool
func (o CloudProjectDatabasePostgresqlConnectionPoolOutput) Size() pulumi.Float64Output {
	return o.ApplyT(func(v *CloudProjectDatabasePostgresqlConnectionPool) pulumi.Float64Output { return v.Size }).(pulumi.Float64Output)
}

// SSL connection mode for the pool
func (o CloudProjectDatabasePostgresqlConnectionPoolOutput) SslMode() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudProjectDatabasePostgresqlConnectionPool) pulumi.StringOutput { return v.SslMode }).(pulumi.StringOutput)
}

func (o CloudProjectDatabasePostgresqlConnectionPoolOutput) Timeouts() CloudProjectDatabasePostgresqlConnectionPoolTimeoutsPtrOutput {
	return o.ApplyT(func(v *CloudProjectDatabasePostgresqlConnectionPool) CloudProjectDatabasePostgresqlConnectionPoolTimeoutsPtrOutput {
		return v.Timeouts
	}).(CloudProjectDatabasePostgresqlConnectionPoolTimeoutsPtrOutput)
}

// Connection URI to the pool
func (o CloudProjectDatabasePostgresqlConnectionPoolOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudProjectDatabasePostgresqlConnectionPool) pulumi.StringOutput { return v.Uri }).(pulumi.StringOutput)
}

// Database user authorized to connect to the pool, if none all the users are allowed
func (o CloudProjectDatabasePostgresqlConnectionPoolOutput) UserId() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudProjectDatabasePostgresqlConnectionPool) pulumi.StringOutput { return v.UserId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CloudProjectDatabasePostgresqlConnectionPoolInput)(nil)).Elem(), &CloudProjectDatabasePostgresqlConnectionPool{})
	pulumi.RegisterOutputType(CloudProjectDatabasePostgresqlConnectionPoolOutput{})
}
