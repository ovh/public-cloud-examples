// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ovh

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/ovh/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type IpFirewall struct {
	pulumi.CustomResourceState

	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// IP (v4 or v6) CIDR notation (e.g., 192.0.2.0/24)
	Ip pulumi.StringOutput `pulumi:"ip"`
	// IPv4 address (e.g., 192.0.2.0)
	IpOnFirewall pulumi.StringOutput `pulumi:"ipOnFirewall"`
	// Current state of your ip on firewall
	State pulumi.StringOutput `pulumi:"state"`
}

// NewIpFirewall registers a new resource with the given unique name, arguments, and options.
func NewIpFirewall(ctx *pulumi.Context,
	name string, args *IpFirewallArgs, opts ...pulumi.ResourceOption) (*IpFirewall, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Ip == nil {
		return nil, errors.New("invalid value for required argument 'Ip'")
	}
	if args.IpOnFirewall == nil {
		return nil, errors.New("invalid value for required argument 'IpOnFirewall'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource IpFirewall
	err = ctx.RegisterPackageResource("ovh:index/ipFirewall:IpFirewall", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIpFirewall gets an existing IpFirewall resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIpFirewall(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IpFirewallState, opts ...pulumi.ResourceOption) (*IpFirewall, error) {
	var resource IpFirewall
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("ovh:index/ipFirewall:IpFirewall", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IpFirewall resources.
type ipFirewallState struct {
	Enabled *bool `pulumi:"enabled"`
	// IP (v4 or v6) CIDR notation (e.g., 192.0.2.0/24)
	Ip *string `pulumi:"ip"`
	// IPv4 address (e.g., 192.0.2.0)
	IpOnFirewall *string `pulumi:"ipOnFirewall"`
	// Current state of your ip on firewall
	State *string `pulumi:"state"`
}

type IpFirewallState struct {
	Enabled pulumi.BoolPtrInput
	// IP (v4 or v6) CIDR notation (e.g., 192.0.2.0/24)
	Ip pulumi.StringPtrInput
	// IPv4 address (e.g., 192.0.2.0)
	IpOnFirewall pulumi.StringPtrInput
	// Current state of your ip on firewall
	State pulumi.StringPtrInput
}

func (IpFirewallState) ElementType() reflect.Type {
	return reflect.TypeOf((*ipFirewallState)(nil)).Elem()
}

type ipFirewallArgs struct {
	Enabled *bool `pulumi:"enabled"`
	// IP (v4 or v6) CIDR notation (e.g., 192.0.2.0/24)
	Ip string `pulumi:"ip"`
	// IPv4 address (e.g., 192.0.2.0)
	IpOnFirewall string `pulumi:"ipOnFirewall"`
}

// The set of arguments for constructing a IpFirewall resource.
type IpFirewallArgs struct {
	Enabled pulumi.BoolPtrInput
	// IP (v4 or v6) CIDR notation (e.g., 192.0.2.0/24)
	Ip pulumi.StringInput
	// IPv4 address (e.g., 192.0.2.0)
	IpOnFirewall pulumi.StringInput
}

func (IpFirewallArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ipFirewallArgs)(nil)).Elem()
}

type IpFirewallInput interface {
	pulumi.Input

	ToIpFirewallOutput() IpFirewallOutput
	ToIpFirewallOutputWithContext(ctx context.Context) IpFirewallOutput
}

func (*IpFirewall) ElementType() reflect.Type {
	return reflect.TypeOf((**IpFirewall)(nil)).Elem()
}

func (i *IpFirewall) ToIpFirewallOutput() IpFirewallOutput {
	return i.ToIpFirewallOutputWithContext(context.Background())
}

func (i *IpFirewall) ToIpFirewallOutputWithContext(ctx context.Context) IpFirewallOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpFirewallOutput)
}

type IpFirewallOutput struct{ *pulumi.OutputState }

func (IpFirewallOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IpFirewall)(nil)).Elem()
}

func (o IpFirewallOutput) ToIpFirewallOutput() IpFirewallOutput {
	return o
}

func (o IpFirewallOutput) ToIpFirewallOutputWithContext(ctx context.Context) IpFirewallOutput {
	return o
}

func (o IpFirewallOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *IpFirewall) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// IP (v4 or v6) CIDR notation (e.g., 192.0.2.0/24)
func (o IpFirewallOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v *IpFirewall) pulumi.StringOutput { return v.Ip }).(pulumi.StringOutput)
}

// IPv4 address (e.g., 192.0.2.0)
func (o IpFirewallOutput) IpOnFirewall() pulumi.StringOutput {
	return o.ApplyT(func(v *IpFirewall) pulumi.StringOutput { return v.IpOnFirewall }).(pulumi.StringOutput)
}

// Current state of your ip on firewall
func (o IpFirewallOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *IpFirewall) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IpFirewallInput)(nil)).Elem(), &IpFirewall{})
	pulumi.RegisterOutputType(IpFirewallOutput{})
}
