// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ovh

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/ovh/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type IpMove struct {
	pulumi.CustomResourceState

	CanBeTerminated pulumi.BoolOutput   `pulumi:"canBeTerminated"`
	Country         pulumi.StringOutput `pulumi:"country"`
	// Custom description on your ip
	Description    pulumi.StringOutput `pulumi:"description"`
	Ip             pulumi.StringOutput `pulumi:"ip"`
	OrganisationId pulumi.StringOutput `pulumi:"organisationId"`
	// Routage information
	RoutedTo    IpMoveRoutedToOutput `pulumi:"routedTo"`
	ServiceName pulumi.StringOutput  `pulumi:"serviceName"`
	// Starting date and time field of the current IP task that is in charge of changing the service the IP is attached to
	TaskStartDate pulumi.StringOutput `pulumi:"taskStartDate"`
	// Status field of the current IP task that is in charge of changing the service the IP is attached to
	TaskStatus pulumi.StringOutput `pulumi:"taskStatus"`
	// Possible values for ip type
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewIpMove registers a new resource with the given unique name, arguments, and options.
func NewIpMove(ctx *pulumi.Context,
	name string, args *IpMoveArgs, opts ...pulumi.ResourceOption) (*IpMove, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Ip == nil {
		return nil, errors.New("invalid value for required argument 'Ip'")
	}
	if args.RoutedTo == nil {
		return nil, errors.New("invalid value for required argument 'RoutedTo'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource IpMove
	err = ctx.RegisterPackageResource("ovh:index/ipMove:IpMove", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIpMove gets an existing IpMove resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIpMove(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IpMoveState, opts ...pulumi.ResourceOption) (*IpMove, error) {
	var resource IpMove
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("ovh:index/ipMove:IpMove", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IpMove resources.
type ipMoveState struct {
	CanBeTerminated *bool   `pulumi:"canBeTerminated"`
	Country         *string `pulumi:"country"`
	// Custom description on your ip
	Description    *string `pulumi:"description"`
	Ip             *string `pulumi:"ip"`
	OrganisationId *string `pulumi:"organisationId"`
	// Routage information
	RoutedTo    *IpMoveRoutedTo `pulumi:"routedTo"`
	ServiceName *string         `pulumi:"serviceName"`
	// Starting date and time field of the current IP task that is in charge of changing the service the IP is attached to
	TaskStartDate *string `pulumi:"taskStartDate"`
	// Status field of the current IP task that is in charge of changing the service the IP is attached to
	TaskStatus *string `pulumi:"taskStatus"`
	// Possible values for ip type
	Type *string `pulumi:"type"`
}

type IpMoveState struct {
	CanBeTerminated pulumi.BoolPtrInput
	Country         pulumi.StringPtrInput
	// Custom description on your ip
	Description    pulumi.StringPtrInput
	Ip             pulumi.StringPtrInput
	OrganisationId pulumi.StringPtrInput
	// Routage information
	RoutedTo    IpMoveRoutedToPtrInput
	ServiceName pulumi.StringPtrInput
	// Starting date and time field of the current IP task that is in charge of changing the service the IP is attached to
	TaskStartDate pulumi.StringPtrInput
	// Status field of the current IP task that is in charge of changing the service the IP is attached to
	TaskStatus pulumi.StringPtrInput
	// Possible values for ip type
	Type pulumi.StringPtrInput
}

func (IpMoveState) ElementType() reflect.Type {
	return reflect.TypeOf((*ipMoveState)(nil)).Elem()
}

type ipMoveArgs struct {
	// Custom description on your ip
	Description *string `pulumi:"description"`
	Ip          string  `pulumi:"ip"`
	// Routage information
	RoutedTo IpMoveRoutedTo `pulumi:"routedTo"`
}

// The set of arguments for constructing a IpMove resource.
type IpMoveArgs struct {
	// Custom description on your ip
	Description pulumi.StringPtrInput
	Ip          pulumi.StringInput
	// Routage information
	RoutedTo IpMoveRoutedToInput
}

func (IpMoveArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ipMoveArgs)(nil)).Elem()
}

type IpMoveInput interface {
	pulumi.Input

	ToIpMoveOutput() IpMoveOutput
	ToIpMoveOutputWithContext(ctx context.Context) IpMoveOutput
}

func (*IpMove) ElementType() reflect.Type {
	return reflect.TypeOf((**IpMove)(nil)).Elem()
}

func (i *IpMove) ToIpMoveOutput() IpMoveOutput {
	return i.ToIpMoveOutputWithContext(context.Background())
}

func (i *IpMove) ToIpMoveOutputWithContext(ctx context.Context) IpMoveOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpMoveOutput)
}

type IpMoveOutput struct{ *pulumi.OutputState }

func (IpMoveOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IpMove)(nil)).Elem()
}

func (o IpMoveOutput) ToIpMoveOutput() IpMoveOutput {
	return o
}

func (o IpMoveOutput) ToIpMoveOutputWithContext(ctx context.Context) IpMoveOutput {
	return o
}

func (o IpMoveOutput) CanBeTerminated() pulumi.BoolOutput {
	return o.ApplyT(func(v *IpMove) pulumi.BoolOutput { return v.CanBeTerminated }).(pulumi.BoolOutput)
}

func (o IpMoveOutput) Country() pulumi.StringOutput {
	return o.ApplyT(func(v *IpMove) pulumi.StringOutput { return v.Country }).(pulumi.StringOutput)
}

// Custom description on your ip
func (o IpMoveOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *IpMove) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

func (o IpMoveOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v *IpMove) pulumi.StringOutput { return v.Ip }).(pulumi.StringOutput)
}

func (o IpMoveOutput) OrganisationId() pulumi.StringOutput {
	return o.ApplyT(func(v *IpMove) pulumi.StringOutput { return v.OrganisationId }).(pulumi.StringOutput)
}

// Routage information
func (o IpMoveOutput) RoutedTo() IpMoveRoutedToOutput {
	return o.ApplyT(func(v *IpMove) IpMoveRoutedToOutput { return v.RoutedTo }).(IpMoveRoutedToOutput)
}

func (o IpMoveOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v *IpMove) pulumi.StringOutput { return v.ServiceName }).(pulumi.StringOutput)
}

// Starting date and time field of the current IP task that is in charge of changing the service the IP is attached to
func (o IpMoveOutput) TaskStartDate() pulumi.StringOutput {
	return o.ApplyT(func(v *IpMove) pulumi.StringOutput { return v.TaskStartDate }).(pulumi.StringOutput)
}

// Status field of the current IP task that is in charge of changing the service the IP is attached to
func (o IpMoveOutput) TaskStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *IpMove) pulumi.StringOutput { return v.TaskStatus }).(pulumi.StringOutput)
}

// Possible values for ip type
func (o IpMoveOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *IpMove) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IpMoveInput)(nil)).Elem(), &IpMove{})
	pulumi.RegisterOutputType(IpMoveOutput{})
}
