// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ovh

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/ovh/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type MeInstallationTemplate struct {
	pulumi.CustomResourceState

	// OVH template name yours will be based on, choose one among the list given by compatibleTemplates function
	BaseTemplateName pulumi.StringOutput `pulumi:"baseTemplateName"`
	// This template bit format (32 or 64)
	BitFormat pulumi.Float64Output `pulumi:"bitFormat"`
	// Category of this template (informative only). (basic, customer, hosting, other, readyToUse, virtualisation)
	Category      pulumi.StringOutput                          `pulumi:"category"`
	Customization MeInstallationTemplateCustomizationPtrOutput `pulumi:"customization"`
	// information about this template
	Description pulumi.StringOutput `pulumi:"description"`
	// the distribution this template is based on
	Distribution pulumi.StringOutput `pulumi:"distribution"`
	// after this date, install of this template will not be possible at OVH
	EndOfInstall pulumi.StringOutput `pulumi:"endOfInstall"`
	// this template family type
	Family pulumi.StringOutput `pulumi:"family"`
	// Filesystems available
	Filesystems pulumi.StringArrayOutput `pulumi:"filesystems"`
	// This distribution supports hardware raid configuration through the OVH API
	//
	// Deprecated: Deprecated
	HardRaidConfiguration pulumi.BoolOutput                          `pulumi:"hardRaidConfiguration"`
	Inputs                MeInstallationTemplateInputTypeArrayOutput `pulumi:"inputs"`
	// Whether this distribution supports Logical Volumes (Linux LVM)
	LvmReady pulumi.BoolOutput `pulumi:"lvmReady"`
	// Partitioning customization is not available for this OS template
	NoPartitioning pulumi.BoolOutput `pulumi:"noPartitioning"`
	// Remove default partition schemes at creation
	RemoveDefaultPartitionSchemes pulumi.BoolOutput `pulumi:"removeDefaultPartitionSchemes"`
	// Partitioning customization is available but limited to mirroring for this OS template
	SoftRaidOnlyMirroring pulumi.BoolOutput `pulumi:"softRaidOnlyMirroring"`
	// this template subfamily type
	Subfamily pulumi.StringOutput `pulumi:"subfamily"`
	// This template name
	TemplateName pulumi.StringOutput `pulumi:"templateName"`
}

// NewMeInstallationTemplate registers a new resource with the given unique name, arguments, and options.
func NewMeInstallationTemplate(ctx *pulumi.Context,
	name string, args *MeInstallationTemplateArgs, opts ...pulumi.ResourceOption) (*MeInstallationTemplate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BaseTemplateName == nil {
		return nil, errors.New("invalid value for required argument 'BaseTemplateName'")
	}
	if args.TemplateName == nil {
		return nil, errors.New("invalid value for required argument 'TemplateName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource MeInstallationTemplate
	err = ctx.RegisterPackageResource("ovh:index/meInstallationTemplate:MeInstallationTemplate", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMeInstallationTemplate gets an existing MeInstallationTemplate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMeInstallationTemplate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MeInstallationTemplateState, opts ...pulumi.ResourceOption) (*MeInstallationTemplate, error) {
	var resource MeInstallationTemplate
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("ovh:index/meInstallationTemplate:MeInstallationTemplate", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MeInstallationTemplate resources.
type meInstallationTemplateState struct {
	// OVH template name yours will be based on, choose one among the list given by compatibleTemplates function
	BaseTemplateName *string `pulumi:"baseTemplateName"`
	// This template bit format (32 or 64)
	BitFormat *float64 `pulumi:"bitFormat"`
	// Category of this template (informative only). (basic, customer, hosting, other, readyToUse, virtualisation)
	Category      *string                              `pulumi:"category"`
	Customization *MeInstallationTemplateCustomization `pulumi:"customization"`
	// information about this template
	Description *string `pulumi:"description"`
	// the distribution this template is based on
	Distribution *string `pulumi:"distribution"`
	// after this date, install of this template will not be possible at OVH
	EndOfInstall *string `pulumi:"endOfInstall"`
	// this template family type
	Family *string `pulumi:"family"`
	// Filesystems available
	Filesystems []string `pulumi:"filesystems"`
	// This distribution supports hardware raid configuration through the OVH API
	//
	// Deprecated: Deprecated
	HardRaidConfiguration *bool                             `pulumi:"hardRaidConfiguration"`
	Inputs                []MeInstallationTemplateInputType `pulumi:"inputs"`
	// Whether this distribution supports Logical Volumes (Linux LVM)
	LvmReady *bool `pulumi:"lvmReady"`
	// Partitioning customization is not available for this OS template
	NoPartitioning *bool `pulumi:"noPartitioning"`
	// Remove default partition schemes at creation
	RemoveDefaultPartitionSchemes *bool `pulumi:"removeDefaultPartitionSchemes"`
	// Partitioning customization is available but limited to mirroring for this OS template
	SoftRaidOnlyMirroring *bool `pulumi:"softRaidOnlyMirroring"`
	// this template subfamily type
	Subfamily *string `pulumi:"subfamily"`
	// This template name
	TemplateName *string `pulumi:"templateName"`
}

type MeInstallationTemplateState struct {
	// OVH template name yours will be based on, choose one among the list given by compatibleTemplates function
	BaseTemplateName pulumi.StringPtrInput
	// This template bit format (32 or 64)
	BitFormat pulumi.Float64PtrInput
	// Category of this template (informative only). (basic, customer, hosting, other, readyToUse, virtualisation)
	Category      pulumi.StringPtrInput
	Customization MeInstallationTemplateCustomizationPtrInput
	// information about this template
	Description pulumi.StringPtrInput
	// the distribution this template is based on
	Distribution pulumi.StringPtrInput
	// after this date, install of this template will not be possible at OVH
	EndOfInstall pulumi.StringPtrInput
	// this template family type
	Family pulumi.StringPtrInput
	// Filesystems available
	Filesystems pulumi.StringArrayInput
	// This distribution supports hardware raid configuration through the OVH API
	//
	// Deprecated: Deprecated
	HardRaidConfiguration pulumi.BoolPtrInput
	Inputs                MeInstallationTemplateInputTypeArrayInput
	// Whether this distribution supports Logical Volumes (Linux LVM)
	LvmReady pulumi.BoolPtrInput
	// Partitioning customization is not available for this OS template
	NoPartitioning pulumi.BoolPtrInput
	// Remove default partition schemes at creation
	RemoveDefaultPartitionSchemes pulumi.BoolPtrInput
	// Partitioning customization is available but limited to mirroring for this OS template
	SoftRaidOnlyMirroring pulumi.BoolPtrInput
	// this template subfamily type
	Subfamily pulumi.StringPtrInput
	// This template name
	TemplateName pulumi.StringPtrInput
}

func (MeInstallationTemplateState) ElementType() reflect.Type {
	return reflect.TypeOf((*meInstallationTemplateState)(nil)).Elem()
}

type meInstallationTemplateArgs struct {
	// OVH template name yours will be based on, choose one among the list given by compatibleTemplates function
	BaseTemplateName string                               `pulumi:"baseTemplateName"`
	Customization    *MeInstallationTemplateCustomization `pulumi:"customization"`
	// Remove default partition schemes at creation
	RemoveDefaultPartitionSchemes *bool `pulumi:"removeDefaultPartitionSchemes"`
	// This template name
	TemplateName string `pulumi:"templateName"`
}

// The set of arguments for constructing a MeInstallationTemplate resource.
type MeInstallationTemplateArgs struct {
	// OVH template name yours will be based on, choose one among the list given by compatibleTemplates function
	BaseTemplateName pulumi.StringInput
	Customization    MeInstallationTemplateCustomizationPtrInput
	// Remove default partition schemes at creation
	RemoveDefaultPartitionSchemes pulumi.BoolPtrInput
	// This template name
	TemplateName pulumi.StringInput
}

func (MeInstallationTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*meInstallationTemplateArgs)(nil)).Elem()
}

type MeInstallationTemplateInput interface {
	pulumi.Input

	ToMeInstallationTemplateOutput() MeInstallationTemplateOutput
	ToMeInstallationTemplateOutputWithContext(ctx context.Context) MeInstallationTemplateOutput
}

func (*MeInstallationTemplate) ElementType() reflect.Type {
	return reflect.TypeOf((**MeInstallationTemplate)(nil)).Elem()
}

func (i *MeInstallationTemplate) ToMeInstallationTemplateOutput() MeInstallationTemplateOutput {
	return i.ToMeInstallationTemplateOutputWithContext(context.Background())
}

func (i *MeInstallationTemplate) ToMeInstallationTemplateOutputWithContext(ctx context.Context) MeInstallationTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MeInstallationTemplateOutput)
}

type MeInstallationTemplateOutput struct{ *pulumi.OutputState }

func (MeInstallationTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MeInstallationTemplate)(nil)).Elem()
}

func (o MeInstallationTemplateOutput) ToMeInstallationTemplateOutput() MeInstallationTemplateOutput {
	return o
}

func (o MeInstallationTemplateOutput) ToMeInstallationTemplateOutputWithContext(ctx context.Context) MeInstallationTemplateOutput {
	return o
}

// OVH template name yours will be based on, choose one among the list given by compatibleTemplates function
func (o MeInstallationTemplateOutput) BaseTemplateName() pulumi.StringOutput {
	return o.ApplyT(func(v *MeInstallationTemplate) pulumi.StringOutput { return v.BaseTemplateName }).(pulumi.StringOutput)
}

// This template bit format (32 or 64)
func (o MeInstallationTemplateOutput) BitFormat() pulumi.Float64Output {
	return o.ApplyT(func(v *MeInstallationTemplate) pulumi.Float64Output { return v.BitFormat }).(pulumi.Float64Output)
}

// Category of this template (informative only). (basic, customer, hosting, other, readyToUse, virtualisation)
func (o MeInstallationTemplateOutput) Category() pulumi.StringOutput {
	return o.ApplyT(func(v *MeInstallationTemplate) pulumi.StringOutput { return v.Category }).(pulumi.StringOutput)
}

func (o MeInstallationTemplateOutput) Customization() MeInstallationTemplateCustomizationPtrOutput {
	return o.ApplyT(func(v *MeInstallationTemplate) MeInstallationTemplateCustomizationPtrOutput { return v.Customization }).(MeInstallationTemplateCustomizationPtrOutput)
}

// information about this template
func (o MeInstallationTemplateOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *MeInstallationTemplate) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// the distribution this template is based on
func (o MeInstallationTemplateOutput) Distribution() pulumi.StringOutput {
	return o.ApplyT(func(v *MeInstallationTemplate) pulumi.StringOutput { return v.Distribution }).(pulumi.StringOutput)
}

// after this date, install of this template will not be possible at OVH
func (o MeInstallationTemplateOutput) EndOfInstall() pulumi.StringOutput {
	return o.ApplyT(func(v *MeInstallationTemplate) pulumi.StringOutput { return v.EndOfInstall }).(pulumi.StringOutput)
}

// this template family type
func (o MeInstallationTemplateOutput) Family() pulumi.StringOutput {
	return o.ApplyT(func(v *MeInstallationTemplate) pulumi.StringOutput { return v.Family }).(pulumi.StringOutput)
}

// Filesystems available
func (o MeInstallationTemplateOutput) Filesystems() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *MeInstallationTemplate) pulumi.StringArrayOutput { return v.Filesystems }).(pulumi.StringArrayOutput)
}

// This distribution supports hardware raid configuration through the OVH API
//
// Deprecated: Deprecated
func (o MeInstallationTemplateOutput) HardRaidConfiguration() pulumi.BoolOutput {
	return o.ApplyT(func(v *MeInstallationTemplate) pulumi.BoolOutput { return v.HardRaidConfiguration }).(pulumi.BoolOutput)
}

func (o MeInstallationTemplateOutput) Inputs() MeInstallationTemplateInputTypeArrayOutput {
	return o.ApplyT(func(v *MeInstallationTemplate) MeInstallationTemplateInputTypeArrayOutput { return v.Inputs }).(MeInstallationTemplateInputTypeArrayOutput)
}

// Whether this distribution supports Logical Volumes (Linux LVM)
func (o MeInstallationTemplateOutput) LvmReady() pulumi.BoolOutput {
	return o.ApplyT(func(v *MeInstallationTemplate) pulumi.BoolOutput { return v.LvmReady }).(pulumi.BoolOutput)
}

// Partitioning customization is not available for this OS template
func (o MeInstallationTemplateOutput) NoPartitioning() pulumi.BoolOutput {
	return o.ApplyT(func(v *MeInstallationTemplate) pulumi.BoolOutput { return v.NoPartitioning }).(pulumi.BoolOutput)
}

// Remove default partition schemes at creation
func (o MeInstallationTemplateOutput) RemoveDefaultPartitionSchemes() pulumi.BoolOutput {
	return o.ApplyT(func(v *MeInstallationTemplate) pulumi.BoolOutput { return v.RemoveDefaultPartitionSchemes }).(pulumi.BoolOutput)
}

// Partitioning customization is available but limited to mirroring for this OS template
func (o MeInstallationTemplateOutput) SoftRaidOnlyMirroring() pulumi.BoolOutput {
	return o.ApplyT(func(v *MeInstallationTemplate) pulumi.BoolOutput { return v.SoftRaidOnlyMirroring }).(pulumi.BoolOutput)
}

// this template subfamily type
func (o MeInstallationTemplateOutput) Subfamily() pulumi.StringOutput {
	return o.ApplyT(func(v *MeInstallationTemplate) pulumi.StringOutput { return v.Subfamily }).(pulumi.StringOutput)
}

// This template name
func (o MeInstallationTemplateOutput) TemplateName() pulumi.StringOutput {
	return o.ApplyT(func(v *MeInstallationTemplate) pulumi.StringOutput { return v.TemplateName }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MeInstallationTemplateInput)(nil)).Elem(), &MeInstallationTemplate{})
	pulumi.RegisterOutputType(MeInstallationTemplateOutput{})
}
