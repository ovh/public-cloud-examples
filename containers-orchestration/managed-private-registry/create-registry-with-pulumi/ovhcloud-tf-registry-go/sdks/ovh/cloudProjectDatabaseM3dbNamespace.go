// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ovh

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/ovh/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type CloudProjectDatabaseM3dbNamespace struct {
	pulumi.CustomResourceState

	// Id of the database cluster
	ClusterId pulumi.StringOutput `pulumi:"clusterId"`
	// Name of the namespace
	Name pulumi.StringOutput `pulumi:"name"`
	// Resolution for an aggregated namespace
	Resolution pulumi.StringOutput `pulumi:"resolution"`
	// Controls how long we wait before expiring stale data
	RetentionBlockDataExpirationDuration pulumi.StringPtrOutput `pulumi:"retentionBlockDataExpirationDuration"`
	// Controls how long to keep a block in memory before flushing to a fileset on disk
	RetentionBlockSizeDuration pulumi.StringOutput `pulumi:"retentionBlockSizeDuration"`
	// Controls how far into the future writes to the namespace will be accepted
	RetentionBufferFutureDuration pulumi.StringPtrOutput `pulumi:"retentionBufferFutureDuration"`
	// Controls how far into the past writes to the namespace will be accepted
	RetentionBufferPastDuration pulumi.StringPtrOutput `pulumi:"retentionBufferPastDuration"`
	// Controls the duration of time that M3DB will retain data for the namespace
	RetentionPeriodDuration pulumi.StringOutput    `pulumi:"retentionPeriodDuration"`
	ServiceName             pulumi.StringPtrOutput `pulumi:"serviceName"`
	// Defines whether M3db will create snapshot files for this namespace
	SnapshotEnabled pulumi.BoolPtrOutput                               `pulumi:"snapshotEnabled"`
	Timeouts        CloudProjectDatabaseM3dbNamespaceTimeoutsPtrOutput `pulumi:"timeouts"`
	// Type of namespace
	Type pulumi.StringOutput `pulumi:"type"`
	// Defines whether M3db will include writes to this namespace in the commit log
	WritesToCommitLogEnabled pulumi.BoolPtrOutput `pulumi:"writesToCommitLogEnabled"`
}

// NewCloudProjectDatabaseM3dbNamespace registers a new resource with the given unique name, arguments, and options.
func NewCloudProjectDatabaseM3dbNamespace(ctx *pulumi.Context,
	name string, args *CloudProjectDatabaseM3dbNamespaceArgs, opts ...pulumi.ResourceOption) (*CloudProjectDatabaseM3dbNamespace, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterId == nil {
		return nil, errors.New("invalid value for required argument 'ClusterId'")
	}
	if args.Resolution == nil {
		return nil, errors.New("invalid value for required argument 'Resolution'")
	}
	if args.RetentionPeriodDuration == nil {
		return nil, errors.New("invalid value for required argument 'RetentionPeriodDuration'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource CloudProjectDatabaseM3dbNamespace
	err = ctx.RegisterPackageResource("ovh:index/cloudProjectDatabaseM3dbNamespace:CloudProjectDatabaseM3dbNamespace", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCloudProjectDatabaseM3dbNamespace gets an existing CloudProjectDatabaseM3dbNamespace resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCloudProjectDatabaseM3dbNamespace(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CloudProjectDatabaseM3dbNamespaceState, opts ...pulumi.ResourceOption) (*CloudProjectDatabaseM3dbNamespace, error) {
	var resource CloudProjectDatabaseM3dbNamespace
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("ovh:index/cloudProjectDatabaseM3dbNamespace:CloudProjectDatabaseM3dbNamespace", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CloudProjectDatabaseM3dbNamespace resources.
type cloudProjectDatabaseM3dbNamespaceState struct {
	// Id of the database cluster
	ClusterId *string `pulumi:"clusterId"`
	// Name of the namespace
	Name *string `pulumi:"name"`
	// Resolution for an aggregated namespace
	Resolution *string `pulumi:"resolution"`
	// Controls how long we wait before expiring stale data
	RetentionBlockDataExpirationDuration *string `pulumi:"retentionBlockDataExpirationDuration"`
	// Controls how long to keep a block in memory before flushing to a fileset on disk
	RetentionBlockSizeDuration *string `pulumi:"retentionBlockSizeDuration"`
	// Controls how far into the future writes to the namespace will be accepted
	RetentionBufferFutureDuration *string `pulumi:"retentionBufferFutureDuration"`
	// Controls how far into the past writes to the namespace will be accepted
	RetentionBufferPastDuration *string `pulumi:"retentionBufferPastDuration"`
	// Controls the duration of time that M3DB will retain data for the namespace
	RetentionPeriodDuration *string `pulumi:"retentionPeriodDuration"`
	ServiceName             *string `pulumi:"serviceName"`
	// Defines whether M3db will create snapshot files for this namespace
	SnapshotEnabled *bool                                      `pulumi:"snapshotEnabled"`
	Timeouts        *CloudProjectDatabaseM3dbNamespaceTimeouts `pulumi:"timeouts"`
	// Type of namespace
	Type *string `pulumi:"type"`
	// Defines whether M3db will include writes to this namespace in the commit log
	WritesToCommitLogEnabled *bool `pulumi:"writesToCommitLogEnabled"`
}

type CloudProjectDatabaseM3dbNamespaceState struct {
	// Id of the database cluster
	ClusterId pulumi.StringPtrInput
	// Name of the namespace
	Name pulumi.StringPtrInput
	// Resolution for an aggregated namespace
	Resolution pulumi.StringPtrInput
	// Controls how long we wait before expiring stale data
	RetentionBlockDataExpirationDuration pulumi.StringPtrInput
	// Controls how long to keep a block in memory before flushing to a fileset on disk
	RetentionBlockSizeDuration pulumi.StringPtrInput
	// Controls how far into the future writes to the namespace will be accepted
	RetentionBufferFutureDuration pulumi.StringPtrInput
	// Controls how far into the past writes to the namespace will be accepted
	RetentionBufferPastDuration pulumi.StringPtrInput
	// Controls the duration of time that M3DB will retain data for the namespace
	RetentionPeriodDuration pulumi.StringPtrInput
	ServiceName             pulumi.StringPtrInput
	// Defines whether M3db will create snapshot files for this namespace
	SnapshotEnabled pulumi.BoolPtrInput
	Timeouts        CloudProjectDatabaseM3dbNamespaceTimeoutsPtrInput
	// Type of namespace
	Type pulumi.StringPtrInput
	// Defines whether M3db will include writes to this namespace in the commit log
	WritesToCommitLogEnabled pulumi.BoolPtrInput
}

func (CloudProjectDatabaseM3dbNamespaceState) ElementType() reflect.Type {
	return reflect.TypeOf((*cloudProjectDatabaseM3dbNamespaceState)(nil)).Elem()
}

type cloudProjectDatabaseM3dbNamespaceArgs struct {
	// Id of the database cluster
	ClusterId string `pulumi:"clusterId"`
	// Name of the namespace
	Name *string `pulumi:"name"`
	// Resolution for an aggregated namespace
	Resolution string `pulumi:"resolution"`
	// Controls how long we wait before expiring stale data
	RetentionBlockDataExpirationDuration *string `pulumi:"retentionBlockDataExpirationDuration"`
	// Controls how long to keep a block in memory before flushing to a fileset on disk
	RetentionBlockSizeDuration *string `pulumi:"retentionBlockSizeDuration"`
	// Controls how far into the future writes to the namespace will be accepted
	RetentionBufferFutureDuration *string `pulumi:"retentionBufferFutureDuration"`
	// Controls how far into the past writes to the namespace will be accepted
	RetentionBufferPastDuration *string `pulumi:"retentionBufferPastDuration"`
	// Controls the duration of time that M3DB will retain data for the namespace
	RetentionPeriodDuration string  `pulumi:"retentionPeriodDuration"`
	ServiceName             *string `pulumi:"serviceName"`
	// Defines whether M3db will create snapshot files for this namespace
	SnapshotEnabled *bool                                      `pulumi:"snapshotEnabled"`
	Timeouts        *CloudProjectDatabaseM3dbNamespaceTimeouts `pulumi:"timeouts"`
	// Defines whether M3db will include writes to this namespace in the commit log
	WritesToCommitLogEnabled *bool `pulumi:"writesToCommitLogEnabled"`
}

// The set of arguments for constructing a CloudProjectDatabaseM3dbNamespace resource.
type CloudProjectDatabaseM3dbNamespaceArgs struct {
	// Id of the database cluster
	ClusterId pulumi.StringInput
	// Name of the namespace
	Name pulumi.StringPtrInput
	// Resolution for an aggregated namespace
	Resolution pulumi.StringInput
	// Controls how long we wait before expiring stale data
	RetentionBlockDataExpirationDuration pulumi.StringPtrInput
	// Controls how long to keep a block in memory before flushing to a fileset on disk
	RetentionBlockSizeDuration pulumi.StringPtrInput
	// Controls how far into the future writes to the namespace will be accepted
	RetentionBufferFutureDuration pulumi.StringPtrInput
	// Controls how far into the past writes to the namespace will be accepted
	RetentionBufferPastDuration pulumi.StringPtrInput
	// Controls the duration of time that M3DB will retain data for the namespace
	RetentionPeriodDuration pulumi.StringInput
	ServiceName             pulumi.StringPtrInput
	// Defines whether M3db will create snapshot files for this namespace
	SnapshotEnabled pulumi.BoolPtrInput
	Timeouts        CloudProjectDatabaseM3dbNamespaceTimeoutsPtrInput
	// Defines whether M3db will include writes to this namespace in the commit log
	WritesToCommitLogEnabled pulumi.BoolPtrInput
}

func (CloudProjectDatabaseM3dbNamespaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cloudProjectDatabaseM3dbNamespaceArgs)(nil)).Elem()
}

type CloudProjectDatabaseM3dbNamespaceInput interface {
	pulumi.Input

	ToCloudProjectDatabaseM3dbNamespaceOutput() CloudProjectDatabaseM3dbNamespaceOutput
	ToCloudProjectDatabaseM3dbNamespaceOutputWithContext(ctx context.Context) CloudProjectDatabaseM3dbNamespaceOutput
}

func (*CloudProjectDatabaseM3dbNamespace) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudProjectDatabaseM3dbNamespace)(nil)).Elem()
}

func (i *CloudProjectDatabaseM3dbNamespace) ToCloudProjectDatabaseM3dbNamespaceOutput() CloudProjectDatabaseM3dbNamespaceOutput {
	return i.ToCloudProjectDatabaseM3dbNamespaceOutputWithContext(context.Background())
}

func (i *CloudProjectDatabaseM3dbNamespace) ToCloudProjectDatabaseM3dbNamespaceOutputWithContext(ctx context.Context) CloudProjectDatabaseM3dbNamespaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudProjectDatabaseM3dbNamespaceOutput)
}

type CloudProjectDatabaseM3dbNamespaceOutput struct{ *pulumi.OutputState }

func (CloudProjectDatabaseM3dbNamespaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudProjectDatabaseM3dbNamespace)(nil)).Elem()
}

func (o CloudProjectDatabaseM3dbNamespaceOutput) ToCloudProjectDatabaseM3dbNamespaceOutput() CloudProjectDatabaseM3dbNamespaceOutput {
	return o
}

func (o CloudProjectDatabaseM3dbNamespaceOutput) ToCloudProjectDatabaseM3dbNamespaceOutputWithContext(ctx context.Context) CloudProjectDatabaseM3dbNamespaceOutput {
	return o
}

// Id of the database cluster
func (o CloudProjectDatabaseM3dbNamespaceOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudProjectDatabaseM3dbNamespace) pulumi.StringOutput { return v.ClusterId }).(pulumi.StringOutput)
}

// Name of the namespace
func (o CloudProjectDatabaseM3dbNamespaceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudProjectDatabaseM3dbNamespace) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Resolution for an aggregated namespace
func (o CloudProjectDatabaseM3dbNamespaceOutput) Resolution() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudProjectDatabaseM3dbNamespace) pulumi.StringOutput { return v.Resolution }).(pulumi.StringOutput)
}

// Controls how long we wait before expiring stale data
func (o CloudProjectDatabaseM3dbNamespaceOutput) RetentionBlockDataExpirationDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CloudProjectDatabaseM3dbNamespace) pulumi.StringPtrOutput {
		return v.RetentionBlockDataExpirationDuration
	}).(pulumi.StringPtrOutput)
}

// Controls how long to keep a block in memory before flushing to a fileset on disk
func (o CloudProjectDatabaseM3dbNamespaceOutput) RetentionBlockSizeDuration() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudProjectDatabaseM3dbNamespace) pulumi.StringOutput { return v.RetentionBlockSizeDuration }).(pulumi.StringOutput)
}

// Controls how far into the future writes to the namespace will be accepted
func (o CloudProjectDatabaseM3dbNamespaceOutput) RetentionBufferFutureDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CloudProjectDatabaseM3dbNamespace) pulumi.StringPtrOutput {
		return v.RetentionBufferFutureDuration
	}).(pulumi.StringPtrOutput)
}

// Controls how far into the past writes to the namespace will be accepted
func (o CloudProjectDatabaseM3dbNamespaceOutput) RetentionBufferPastDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CloudProjectDatabaseM3dbNamespace) pulumi.StringPtrOutput {
		return v.RetentionBufferPastDuration
	}).(pulumi.StringPtrOutput)
}

// Controls the duration of time that M3DB will retain data for the namespace
func (o CloudProjectDatabaseM3dbNamespaceOutput) RetentionPeriodDuration() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudProjectDatabaseM3dbNamespace) pulumi.StringOutput { return v.RetentionPeriodDuration }).(pulumi.StringOutput)
}

func (o CloudProjectDatabaseM3dbNamespaceOutput) ServiceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CloudProjectDatabaseM3dbNamespace) pulumi.StringPtrOutput { return v.ServiceName }).(pulumi.StringPtrOutput)
}

// Defines whether M3db will create snapshot files for this namespace
func (o CloudProjectDatabaseM3dbNamespaceOutput) SnapshotEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CloudProjectDatabaseM3dbNamespace) pulumi.BoolPtrOutput { return v.SnapshotEnabled }).(pulumi.BoolPtrOutput)
}

func (o CloudProjectDatabaseM3dbNamespaceOutput) Timeouts() CloudProjectDatabaseM3dbNamespaceTimeoutsPtrOutput {
	return o.ApplyT(func(v *CloudProjectDatabaseM3dbNamespace) CloudProjectDatabaseM3dbNamespaceTimeoutsPtrOutput {
		return v.Timeouts
	}).(CloudProjectDatabaseM3dbNamespaceTimeoutsPtrOutput)
}

// Type of namespace
func (o CloudProjectDatabaseM3dbNamespaceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudProjectDatabaseM3dbNamespace) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Defines whether M3db will include writes to this namespace in the commit log
func (o CloudProjectDatabaseM3dbNamespaceOutput) WritesToCommitLogEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CloudProjectDatabaseM3dbNamespace) pulumi.BoolPtrOutput { return v.WritesToCommitLogEnabled }).(pulumi.BoolPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CloudProjectDatabaseM3dbNamespaceInput)(nil)).Elem(), &CloudProjectDatabaseM3dbNamespace{})
	pulumi.RegisterOutputType(CloudProjectDatabaseM3dbNamespaceOutput{})
}
