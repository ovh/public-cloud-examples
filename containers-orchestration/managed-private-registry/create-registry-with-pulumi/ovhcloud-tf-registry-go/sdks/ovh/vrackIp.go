// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ovh

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/ovh/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type VrackIp struct {
	pulumi.CustomResourceState

	// Your IP block.
	Block pulumi.StringOutput `pulumi:"block"`
	// Your gateway
	Gateway pulumi.StringOutput `pulumi:"gateway"`
	// Your IP block
	Ip pulumi.StringOutput `pulumi:"ip"`
	// The internal name of your vrack
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
	// Where you want your block announced on the network
	Zone pulumi.StringOutput `pulumi:"zone"`
}

// NewVrackIp registers a new resource with the given unique name, arguments, and options.
func NewVrackIp(ctx *pulumi.Context,
	name string, args *VrackIpArgs, opts ...pulumi.ResourceOption) (*VrackIp, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Block == nil {
		return nil, errors.New("invalid value for required argument 'Block'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource VrackIp
	err = ctx.RegisterPackageResource("ovh:index/vrackIp:VrackIp", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVrackIp gets an existing VrackIp resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVrackIp(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VrackIpState, opts ...pulumi.ResourceOption) (*VrackIp, error) {
	var resource VrackIp
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("ovh:index/vrackIp:VrackIp", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VrackIp resources.
type vrackIpState struct {
	// Your IP block.
	Block *string `pulumi:"block"`
	// Your gateway
	Gateway *string `pulumi:"gateway"`
	// Your IP block
	Ip *string `pulumi:"ip"`
	// The internal name of your vrack
	ServiceName *string `pulumi:"serviceName"`
	// Where you want your block announced on the network
	Zone *string `pulumi:"zone"`
}

type VrackIpState struct {
	// Your IP block.
	Block pulumi.StringPtrInput
	// Your gateway
	Gateway pulumi.StringPtrInput
	// Your IP block
	Ip pulumi.StringPtrInput
	// The internal name of your vrack
	ServiceName pulumi.StringPtrInput
	// Where you want your block announced on the network
	Zone pulumi.StringPtrInput
}

func (VrackIpState) ElementType() reflect.Type {
	return reflect.TypeOf((*vrackIpState)(nil)).Elem()
}

type vrackIpArgs struct {
	// Your IP block.
	Block string `pulumi:"block"`
	// The internal name of your vrack
	ServiceName string `pulumi:"serviceName"`
}

// The set of arguments for constructing a VrackIp resource.
type VrackIpArgs struct {
	// Your IP block.
	Block pulumi.StringInput
	// The internal name of your vrack
	ServiceName pulumi.StringInput
}

func (VrackIpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vrackIpArgs)(nil)).Elem()
}

type VrackIpInput interface {
	pulumi.Input

	ToVrackIpOutput() VrackIpOutput
	ToVrackIpOutputWithContext(ctx context.Context) VrackIpOutput
}

func (*VrackIp) ElementType() reflect.Type {
	return reflect.TypeOf((**VrackIp)(nil)).Elem()
}

func (i *VrackIp) ToVrackIpOutput() VrackIpOutput {
	return i.ToVrackIpOutputWithContext(context.Background())
}

func (i *VrackIp) ToVrackIpOutputWithContext(ctx context.Context) VrackIpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VrackIpOutput)
}

type VrackIpOutput struct{ *pulumi.OutputState }

func (VrackIpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VrackIp)(nil)).Elem()
}

func (o VrackIpOutput) ToVrackIpOutput() VrackIpOutput {
	return o
}

func (o VrackIpOutput) ToVrackIpOutputWithContext(ctx context.Context) VrackIpOutput {
	return o
}

// Your IP block.
func (o VrackIpOutput) Block() pulumi.StringOutput {
	return o.ApplyT(func(v *VrackIp) pulumi.StringOutput { return v.Block }).(pulumi.StringOutput)
}

// Your gateway
func (o VrackIpOutput) Gateway() pulumi.StringOutput {
	return o.ApplyT(func(v *VrackIp) pulumi.StringOutput { return v.Gateway }).(pulumi.StringOutput)
}

// Your IP block
func (o VrackIpOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v *VrackIp) pulumi.StringOutput { return v.Ip }).(pulumi.StringOutput)
}

// The internal name of your vrack
func (o VrackIpOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v *VrackIp) pulumi.StringOutput { return v.ServiceName }).(pulumi.StringOutput)
}

// Where you want your block announced on the network
func (o VrackIpOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v *VrackIp) pulumi.StringOutput { return v.Zone }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VrackIpInput)(nil)).Elem(), &VrackIp{})
	pulumi.RegisterOutputType(VrackIpOutput{})
}
