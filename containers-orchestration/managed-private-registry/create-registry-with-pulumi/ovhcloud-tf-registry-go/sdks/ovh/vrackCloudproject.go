// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ovh

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/ovh/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type VrackCloudproject struct {
	pulumi.CustomResourceState

	ProjectId pulumi.StringPtrOutput `pulumi:"projectId"`
	// Service name of the vrack resource.
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
}

// NewVrackCloudproject registers a new resource with the given unique name, arguments, and options.
func NewVrackCloudproject(ctx *pulumi.Context,
	name string, args *VrackCloudprojectArgs, opts ...pulumi.ResourceOption) (*VrackCloudproject, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource VrackCloudproject
	err = ctx.RegisterPackageResource("ovh:index/vrackCloudproject:VrackCloudproject", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVrackCloudproject gets an existing VrackCloudproject resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVrackCloudproject(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VrackCloudprojectState, opts ...pulumi.ResourceOption) (*VrackCloudproject, error) {
	var resource VrackCloudproject
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("ovh:index/vrackCloudproject:VrackCloudproject", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VrackCloudproject resources.
type vrackCloudprojectState struct {
	ProjectId *string `pulumi:"projectId"`
	// Service name of the vrack resource.
	ServiceName *string `pulumi:"serviceName"`
}

type VrackCloudprojectState struct {
	ProjectId pulumi.StringPtrInput
	// Service name of the vrack resource.
	ServiceName pulumi.StringPtrInput
}

func (VrackCloudprojectState) ElementType() reflect.Type {
	return reflect.TypeOf((*vrackCloudprojectState)(nil)).Elem()
}

type vrackCloudprojectArgs struct {
	ProjectId *string `pulumi:"projectId"`
	// Service name of the vrack resource.
	ServiceName string `pulumi:"serviceName"`
}

// The set of arguments for constructing a VrackCloudproject resource.
type VrackCloudprojectArgs struct {
	ProjectId pulumi.StringPtrInput
	// Service name of the vrack resource.
	ServiceName pulumi.StringInput
}

func (VrackCloudprojectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vrackCloudprojectArgs)(nil)).Elem()
}

type VrackCloudprojectInput interface {
	pulumi.Input

	ToVrackCloudprojectOutput() VrackCloudprojectOutput
	ToVrackCloudprojectOutputWithContext(ctx context.Context) VrackCloudprojectOutput
}

func (*VrackCloudproject) ElementType() reflect.Type {
	return reflect.TypeOf((**VrackCloudproject)(nil)).Elem()
}

func (i *VrackCloudproject) ToVrackCloudprojectOutput() VrackCloudprojectOutput {
	return i.ToVrackCloudprojectOutputWithContext(context.Background())
}

func (i *VrackCloudproject) ToVrackCloudprojectOutputWithContext(ctx context.Context) VrackCloudprojectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VrackCloudprojectOutput)
}

type VrackCloudprojectOutput struct{ *pulumi.OutputState }

func (VrackCloudprojectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VrackCloudproject)(nil)).Elem()
}

func (o VrackCloudprojectOutput) ToVrackCloudprojectOutput() VrackCloudprojectOutput {
	return o
}

func (o VrackCloudprojectOutput) ToVrackCloudprojectOutputWithContext(ctx context.Context) VrackCloudprojectOutput {
	return o
}

func (o VrackCloudprojectOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VrackCloudproject) pulumi.StringPtrOutput { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// Service name of the vrack resource.
func (o VrackCloudprojectOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v *VrackCloudproject) pulumi.StringOutput { return v.ServiceName }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VrackCloudprojectInput)(nil)).Elem(), &VrackCloudproject{})
	pulumi.RegisterOutputType(VrackCloudprojectOutput{})
}
