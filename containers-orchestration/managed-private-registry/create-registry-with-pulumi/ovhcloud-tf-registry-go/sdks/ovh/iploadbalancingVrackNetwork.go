// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ovh

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/ovh/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type IploadbalancingVrackNetwork struct {
	pulumi.CustomResourceState

	// Human readable name for your vrack network
	DisplayName pulumi.StringPtrOutput `pulumi:"displayName"`
	// This attribute is there for documentation purpose only and isnt passed to the OVH API as it may conflicts with http/tcp
	// farms `vrack_network_id` attribute
	FarmIds pulumi.Float64ArrayOutput `pulumi:"farmIds"`
	// An IP block used as a pool of IPs by this Load Balancer to connect to the servers in this private network. The blck must
	// be in the private network and reserved for the Load Balancer
	NatIp pulumi.StringOutput `pulumi:"natIp"`
	// The internal name of your IPloadbalancer
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
	// IP block of the private network in the vRack
	Subnet pulumi.StringOutput `pulumi:"subnet"`
	// VLAN of the private network in the vRack. 0 if the private network is not in a VLAN
	Vlan pulumi.Float64Output `pulumi:"vlan"`
	// Internal Load Balancer identifier of the vRack private network
	VrackNetworkId pulumi.Float64Output `pulumi:"vrackNetworkId"`
}

// NewIploadbalancingVrackNetwork registers a new resource with the given unique name, arguments, and options.
func NewIploadbalancingVrackNetwork(ctx *pulumi.Context,
	name string, args *IploadbalancingVrackNetworkArgs, opts ...pulumi.ResourceOption) (*IploadbalancingVrackNetwork, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NatIp == nil {
		return nil, errors.New("invalid value for required argument 'NatIp'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	if args.Subnet == nil {
		return nil, errors.New("invalid value for required argument 'Subnet'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource IploadbalancingVrackNetwork
	err = ctx.RegisterPackageResource("ovh:index/iploadbalancingVrackNetwork:IploadbalancingVrackNetwork", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIploadbalancingVrackNetwork gets an existing IploadbalancingVrackNetwork resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIploadbalancingVrackNetwork(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IploadbalancingVrackNetworkState, opts ...pulumi.ResourceOption) (*IploadbalancingVrackNetwork, error) {
	var resource IploadbalancingVrackNetwork
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("ovh:index/iploadbalancingVrackNetwork:IploadbalancingVrackNetwork", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IploadbalancingVrackNetwork resources.
type iploadbalancingVrackNetworkState struct {
	// Human readable name for your vrack network
	DisplayName *string `pulumi:"displayName"`
	// This attribute is there for documentation purpose only and isnt passed to the OVH API as it may conflicts with http/tcp
	// farms `vrack_network_id` attribute
	FarmIds []float64 `pulumi:"farmIds"`
	// An IP block used as a pool of IPs by this Load Balancer to connect to the servers in this private network. The blck must
	// be in the private network and reserved for the Load Balancer
	NatIp *string `pulumi:"natIp"`
	// The internal name of your IPloadbalancer
	ServiceName *string `pulumi:"serviceName"`
	// IP block of the private network in the vRack
	Subnet *string `pulumi:"subnet"`
	// VLAN of the private network in the vRack. 0 if the private network is not in a VLAN
	Vlan *float64 `pulumi:"vlan"`
	// Internal Load Balancer identifier of the vRack private network
	VrackNetworkId *float64 `pulumi:"vrackNetworkId"`
}

type IploadbalancingVrackNetworkState struct {
	// Human readable name for your vrack network
	DisplayName pulumi.StringPtrInput
	// This attribute is there for documentation purpose only and isnt passed to the OVH API as it may conflicts with http/tcp
	// farms `vrack_network_id` attribute
	FarmIds pulumi.Float64ArrayInput
	// An IP block used as a pool of IPs by this Load Balancer to connect to the servers in this private network. The blck must
	// be in the private network and reserved for the Load Balancer
	NatIp pulumi.StringPtrInput
	// The internal name of your IPloadbalancer
	ServiceName pulumi.StringPtrInput
	// IP block of the private network in the vRack
	Subnet pulumi.StringPtrInput
	// VLAN of the private network in the vRack. 0 if the private network is not in a VLAN
	Vlan pulumi.Float64PtrInput
	// Internal Load Balancer identifier of the vRack private network
	VrackNetworkId pulumi.Float64PtrInput
}

func (IploadbalancingVrackNetworkState) ElementType() reflect.Type {
	return reflect.TypeOf((*iploadbalancingVrackNetworkState)(nil)).Elem()
}

type iploadbalancingVrackNetworkArgs struct {
	// Human readable name for your vrack network
	DisplayName *string `pulumi:"displayName"`
	// This attribute is there for documentation purpose only and isnt passed to the OVH API as it may conflicts with http/tcp
	// farms `vrack_network_id` attribute
	FarmIds []float64 `pulumi:"farmIds"`
	// An IP block used as a pool of IPs by this Load Balancer to connect to the servers in this private network. The blck must
	// be in the private network and reserved for the Load Balancer
	NatIp string `pulumi:"natIp"`
	// The internal name of your IPloadbalancer
	ServiceName string `pulumi:"serviceName"`
	// IP block of the private network in the vRack
	Subnet string `pulumi:"subnet"`
	// VLAN of the private network in the vRack. 0 if the private network is not in a VLAN
	Vlan *float64 `pulumi:"vlan"`
}

// The set of arguments for constructing a IploadbalancingVrackNetwork resource.
type IploadbalancingVrackNetworkArgs struct {
	// Human readable name for your vrack network
	DisplayName pulumi.StringPtrInput
	// This attribute is there for documentation purpose only and isnt passed to the OVH API as it may conflicts with http/tcp
	// farms `vrack_network_id` attribute
	FarmIds pulumi.Float64ArrayInput
	// An IP block used as a pool of IPs by this Load Balancer to connect to the servers in this private network. The blck must
	// be in the private network and reserved for the Load Balancer
	NatIp pulumi.StringInput
	// The internal name of your IPloadbalancer
	ServiceName pulumi.StringInput
	// IP block of the private network in the vRack
	Subnet pulumi.StringInput
	// VLAN of the private network in the vRack. 0 if the private network is not in a VLAN
	Vlan pulumi.Float64PtrInput
}

func (IploadbalancingVrackNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*iploadbalancingVrackNetworkArgs)(nil)).Elem()
}

type IploadbalancingVrackNetworkInput interface {
	pulumi.Input

	ToIploadbalancingVrackNetworkOutput() IploadbalancingVrackNetworkOutput
	ToIploadbalancingVrackNetworkOutputWithContext(ctx context.Context) IploadbalancingVrackNetworkOutput
}

func (*IploadbalancingVrackNetwork) ElementType() reflect.Type {
	return reflect.TypeOf((**IploadbalancingVrackNetwork)(nil)).Elem()
}

func (i *IploadbalancingVrackNetwork) ToIploadbalancingVrackNetworkOutput() IploadbalancingVrackNetworkOutput {
	return i.ToIploadbalancingVrackNetworkOutputWithContext(context.Background())
}

func (i *IploadbalancingVrackNetwork) ToIploadbalancingVrackNetworkOutputWithContext(ctx context.Context) IploadbalancingVrackNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IploadbalancingVrackNetworkOutput)
}

type IploadbalancingVrackNetworkOutput struct{ *pulumi.OutputState }

func (IploadbalancingVrackNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IploadbalancingVrackNetwork)(nil)).Elem()
}

func (o IploadbalancingVrackNetworkOutput) ToIploadbalancingVrackNetworkOutput() IploadbalancingVrackNetworkOutput {
	return o
}

func (o IploadbalancingVrackNetworkOutput) ToIploadbalancingVrackNetworkOutputWithContext(ctx context.Context) IploadbalancingVrackNetworkOutput {
	return o
}

// Human readable name for your vrack network
func (o IploadbalancingVrackNetworkOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IploadbalancingVrackNetwork) pulumi.StringPtrOutput { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// This attribute is there for documentation purpose only and isnt passed to the OVH API as it may conflicts with http/tcp
// farms `vrack_network_id` attribute
func (o IploadbalancingVrackNetworkOutput) FarmIds() pulumi.Float64ArrayOutput {
	return o.ApplyT(func(v *IploadbalancingVrackNetwork) pulumi.Float64ArrayOutput { return v.FarmIds }).(pulumi.Float64ArrayOutput)
}

// An IP block used as a pool of IPs by this Load Balancer to connect to the servers in this private network. The blck must
// be in the private network and reserved for the Load Balancer
func (o IploadbalancingVrackNetworkOutput) NatIp() pulumi.StringOutput {
	return o.ApplyT(func(v *IploadbalancingVrackNetwork) pulumi.StringOutput { return v.NatIp }).(pulumi.StringOutput)
}

// The internal name of your IPloadbalancer
func (o IploadbalancingVrackNetworkOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v *IploadbalancingVrackNetwork) pulumi.StringOutput { return v.ServiceName }).(pulumi.StringOutput)
}

// IP block of the private network in the vRack
func (o IploadbalancingVrackNetworkOutput) Subnet() pulumi.StringOutput {
	return o.ApplyT(func(v *IploadbalancingVrackNetwork) pulumi.StringOutput { return v.Subnet }).(pulumi.StringOutput)
}

// VLAN of the private network in the vRack. 0 if the private network is not in a VLAN
func (o IploadbalancingVrackNetworkOutput) Vlan() pulumi.Float64Output {
	return o.ApplyT(func(v *IploadbalancingVrackNetwork) pulumi.Float64Output { return v.Vlan }).(pulumi.Float64Output)
}

// Internal Load Balancer identifier of the vRack private network
func (o IploadbalancingVrackNetworkOutput) VrackNetworkId() pulumi.Float64Output {
	return o.ApplyT(func(v *IploadbalancingVrackNetwork) pulumi.Float64Output { return v.VrackNetworkId }).(pulumi.Float64Output)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IploadbalancingVrackNetworkInput)(nil)).Elem(), &IploadbalancingVrackNetwork{})
	pulumi.RegisterOutputType(IploadbalancingVrackNetworkOutput{})
}
