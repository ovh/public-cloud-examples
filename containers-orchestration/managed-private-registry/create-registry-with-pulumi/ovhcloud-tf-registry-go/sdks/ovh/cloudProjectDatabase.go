// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ovh

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/ovh/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type CloudProjectDatabase struct {
	pulumi.CustomResourceState

	// Advanced configuration key / value
	AdvancedConfiguration pulumi.StringMapOutput `pulumi:"advancedConfiguration"`
	// List of region where backups are pushed. Not more than 1 regions for MongoDB. Not more than 2 regions for the other
	// engines with one being the same as the nodes[].region field
	BackupRegions pulumi.StringArrayOutput `pulumi:"backupRegions"`
	// Time on which backups start every day
	BackupTime pulumi.StringOutput `pulumi:"backupTime"`
	// Date of the creation of the cluster
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Description of the cluster
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Disk size attributes of the cluster
	DiskSize pulumi.Float64Output `pulumi:"diskSize"`
	// Disk type attributes of the cluster
	DiskType pulumi.StringOutput `pulumi:"diskType"`
	// List of all endpoints of the service
	Endpoints CloudProjectDatabaseEndpointArrayOutput `pulumi:"endpoints"`
	// Name of the engine of the service
	Engine pulumi.StringOutput `pulumi:"engine"`
	// The node flavor used for this cluster
	Flavor pulumi.StringOutput `pulumi:"flavor"`
	// IP Blocks authorized to access to the cluster
	IpRestrictions CloudProjectDatabaseIpRestrictionTypeArrayOutput `pulumi:"ipRestrictions"`
	// Defines whether the REST API is enabled on a Kafka cluster
	KafkaRestApi pulumi.BoolPtrOutput `pulumi:"kafkaRestApi"`
	// Defines whether the schema registry is enabled on a Kafka cluster
	KafkaSchemaRegistry pulumi.BoolPtrOutput `pulumi:"kafkaSchemaRegistry"`
	// Time on which maintenances can start every day
	MaintenanceTime pulumi.StringOutput `pulumi:"maintenanceTime"`
	// Type of network of the cluster
	NetworkType pulumi.StringOutput `pulumi:"networkType"`
	// List of nodes composing the service
	Nodes CloudProjectDatabaseNodeArrayOutput `pulumi:"nodes"`
	// Defines whether the ACLs are enabled on an Opensearch cluster
	OpensearchAclsEnabled pulumi.BoolPtrOutput `pulumi:"opensearchAclsEnabled"`
	// Plan of the cluster
	Plan        pulumi.StringOutput    `pulumi:"plan"`
	ServiceName pulumi.StringPtrOutput `pulumi:"serviceName"`
	// Current status of the cluster
	Status   pulumi.StringOutput                   `pulumi:"status"`
	Timeouts CloudProjectDatabaseTimeoutsPtrOutput `pulumi:"timeouts"`
	// Version of the engine deployed on the cluster
	Version pulumi.StringOutput `pulumi:"version"`
}

// NewCloudProjectDatabase registers a new resource with the given unique name, arguments, and options.
func NewCloudProjectDatabase(ctx *pulumi.Context,
	name string, args *CloudProjectDatabaseArgs, opts ...pulumi.ResourceOption) (*CloudProjectDatabase, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Engine == nil {
		return nil, errors.New("invalid value for required argument 'Engine'")
	}
	if args.Flavor == nil {
		return nil, errors.New("invalid value for required argument 'Flavor'")
	}
	if args.Nodes == nil {
		return nil, errors.New("invalid value for required argument 'Nodes'")
	}
	if args.Plan == nil {
		return nil, errors.New("invalid value for required argument 'Plan'")
	}
	if args.Version == nil {
		return nil, errors.New("invalid value for required argument 'Version'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource CloudProjectDatabase
	err = ctx.RegisterPackageResource("ovh:index/cloudProjectDatabase:CloudProjectDatabase", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCloudProjectDatabase gets an existing CloudProjectDatabase resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCloudProjectDatabase(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CloudProjectDatabaseState, opts ...pulumi.ResourceOption) (*CloudProjectDatabase, error) {
	var resource CloudProjectDatabase
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("ovh:index/cloudProjectDatabase:CloudProjectDatabase", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CloudProjectDatabase resources.
type cloudProjectDatabaseState struct {
	// Advanced configuration key / value
	AdvancedConfiguration map[string]string `pulumi:"advancedConfiguration"`
	// List of region where backups are pushed. Not more than 1 regions for MongoDB. Not more than 2 regions for the other
	// engines with one being the same as the nodes[].region field
	BackupRegions []string `pulumi:"backupRegions"`
	// Time on which backups start every day
	BackupTime *string `pulumi:"backupTime"`
	// Date of the creation of the cluster
	CreatedAt *string `pulumi:"createdAt"`
	// Description of the cluster
	Description *string `pulumi:"description"`
	// Disk size attributes of the cluster
	DiskSize *float64 `pulumi:"diskSize"`
	// Disk type attributes of the cluster
	DiskType *string `pulumi:"diskType"`
	// List of all endpoints of the service
	Endpoints []CloudProjectDatabaseEndpoint `pulumi:"endpoints"`
	// Name of the engine of the service
	Engine *string `pulumi:"engine"`
	// The node flavor used for this cluster
	Flavor *string `pulumi:"flavor"`
	// IP Blocks authorized to access to the cluster
	IpRestrictions []CloudProjectDatabaseIpRestrictionType `pulumi:"ipRestrictions"`
	// Defines whether the REST API is enabled on a Kafka cluster
	KafkaRestApi *bool `pulumi:"kafkaRestApi"`
	// Defines whether the schema registry is enabled on a Kafka cluster
	KafkaSchemaRegistry *bool `pulumi:"kafkaSchemaRegistry"`
	// Time on which maintenances can start every day
	MaintenanceTime *string `pulumi:"maintenanceTime"`
	// Type of network of the cluster
	NetworkType *string `pulumi:"networkType"`
	// List of nodes composing the service
	Nodes []CloudProjectDatabaseNode `pulumi:"nodes"`
	// Defines whether the ACLs are enabled on an Opensearch cluster
	OpensearchAclsEnabled *bool `pulumi:"opensearchAclsEnabled"`
	// Plan of the cluster
	Plan        *string `pulumi:"plan"`
	ServiceName *string `pulumi:"serviceName"`
	// Current status of the cluster
	Status   *string                       `pulumi:"status"`
	Timeouts *CloudProjectDatabaseTimeouts `pulumi:"timeouts"`
	// Version of the engine deployed on the cluster
	Version *string `pulumi:"version"`
}

type CloudProjectDatabaseState struct {
	// Advanced configuration key / value
	AdvancedConfiguration pulumi.StringMapInput
	// List of region where backups are pushed. Not more than 1 regions for MongoDB. Not more than 2 regions for the other
	// engines with one being the same as the nodes[].region field
	BackupRegions pulumi.StringArrayInput
	// Time on which backups start every day
	BackupTime pulumi.StringPtrInput
	// Date of the creation of the cluster
	CreatedAt pulumi.StringPtrInput
	// Description of the cluster
	Description pulumi.StringPtrInput
	// Disk size attributes of the cluster
	DiskSize pulumi.Float64PtrInput
	// Disk type attributes of the cluster
	DiskType pulumi.StringPtrInput
	// List of all endpoints of the service
	Endpoints CloudProjectDatabaseEndpointArrayInput
	// Name of the engine of the service
	Engine pulumi.StringPtrInput
	// The node flavor used for this cluster
	Flavor pulumi.StringPtrInput
	// IP Blocks authorized to access to the cluster
	IpRestrictions CloudProjectDatabaseIpRestrictionTypeArrayInput
	// Defines whether the REST API is enabled on a Kafka cluster
	KafkaRestApi pulumi.BoolPtrInput
	// Defines whether the schema registry is enabled on a Kafka cluster
	KafkaSchemaRegistry pulumi.BoolPtrInput
	// Time on which maintenances can start every day
	MaintenanceTime pulumi.StringPtrInput
	// Type of network of the cluster
	NetworkType pulumi.StringPtrInput
	// List of nodes composing the service
	Nodes CloudProjectDatabaseNodeArrayInput
	// Defines whether the ACLs are enabled on an Opensearch cluster
	OpensearchAclsEnabled pulumi.BoolPtrInput
	// Plan of the cluster
	Plan        pulumi.StringPtrInput
	ServiceName pulumi.StringPtrInput
	// Current status of the cluster
	Status   pulumi.StringPtrInput
	Timeouts CloudProjectDatabaseTimeoutsPtrInput
	// Version of the engine deployed on the cluster
	Version pulumi.StringPtrInput
}

func (CloudProjectDatabaseState) ElementType() reflect.Type {
	return reflect.TypeOf((*cloudProjectDatabaseState)(nil)).Elem()
}

type cloudProjectDatabaseArgs struct {
	// Advanced configuration key / value
	AdvancedConfiguration map[string]string `pulumi:"advancedConfiguration"`
	// List of region where backups are pushed. Not more than 1 regions for MongoDB. Not more than 2 regions for the other
	// engines with one being the same as the nodes[].region field
	BackupRegions []string `pulumi:"backupRegions"`
	// Time on which backups start every day
	BackupTime *string `pulumi:"backupTime"`
	// Description of the cluster
	Description *string `pulumi:"description"`
	// Disk size attributes of the cluster
	DiskSize *float64 `pulumi:"diskSize"`
	// Name of the engine of the service
	Engine string `pulumi:"engine"`
	// The node flavor used for this cluster
	Flavor string `pulumi:"flavor"`
	// IP Blocks authorized to access to the cluster
	IpRestrictions []CloudProjectDatabaseIpRestrictionType `pulumi:"ipRestrictions"`
	// Defines whether the REST API is enabled on a Kafka cluster
	KafkaRestApi *bool `pulumi:"kafkaRestApi"`
	// Defines whether the schema registry is enabled on a Kafka cluster
	KafkaSchemaRegistry *bool `pulumi:"kafkaSchemaRegistry"`
	// List of nodes composing the service
	Nodes []CloudProjectDatabaseNode `pulumi:"nodes"`
	// Defines whether the ACLs are enabled on an Opensearch cluster
	OpensearchAclsEnabled *bool `pulumi:"opensearchAclsEnabled"`
	// Plan of the cluster
	Plan        string                        `pulumi:"plan"`
	ServiceName *string                       `pulumi:"serviceName"`
	Timeouts    *CloudProjectDatabaseTimeouts `pulumi:"timeouts"`
	// Version of the engine deployed on the cluster
	Version string `pulumi:"version"`
}

// The set of arguments for constructing a CloudProjectDatabase resource.
type CloudProjectDatabaseArgs struct {
	// Advanced configuration key / value
	AdvancedConfiguration pulumi.StringMapInput
	// List of region where backups are pushed. Not more than 1 regions for MongoDB. Not more than 2 regions for the other
	// engines with one being the same as the nodes[].region field
	BackupRegions pulumi.StringArrayInput
	// Time on which backups start every day
	BackupTime pulumi.StringPtrInput
	// Description of the cluster
	Description pulumi.StringPtrInput
	// Disk size attributes of the cluster
	DiskSize pulumi.Float64PtrInput
	// Name of the engine of the service
	Engine pulumi.StringInput
	// The node flavor used for this cluster
	Flavor pulumi.StringInput
	// IP Blocks authorized to access to the cluster
	IpRestrictions CloudProjectDatabaseIpRestrictionTypeArrayInput
	// Defines whether the REST API is enabled on a Kafka cluster
	KafkaRestApi pulumi.BoolPtrInput
	// Defines whether the schema registry is enabled on a Kafka cluster
	KafkaSchemaRegistry pulumi.BoolPtrInput
	// List of nodes composing the service
	Nodes CloudProjectDatabaseNodeArrayInput
	// Defines whether the ACLs are enabled on an Opensearch cluster
	OpensearchAclsEnabled pulumi.BoolPtrInput
	// Plan of the cluster
	Plan        pulumi.StringInput
	ServiceName pulumi.StringPtrInput
	Timeouts    CloudProjectDatabaseTimeoutsPtrInput
	// Version of the engine deployed on the cluster
	Version pulumi.StringInput
}

func (CloudProjectDatabaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cloudProjectDatabaseArgs)(nil)).Elem()
}

type CloudProjectDatabaseInput interface {
	pulumi.Input

	ToCloudProjectDatabaseOutput() CloudProjectDatabaseOutput
	ToCloudProjectDatabaseOutputWithContext(ctx context.Context) CloudProjectDatabaseOutput
}

func (*CloudProjectDatabase) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudProjectDatabase)(nil)).Elem()
}

func (i *CloudProjectDatabase) ToCloudProjectDatabaseOutput() CloudProjectDatabaseOutput {
	return i.ToCloudProjectDatabaseOutputWithContext(context.Background())
}

func (i *CloudProjectDatabase) ToCloudProjectDatabaseOutputWithContext(ctx context.Context) CloudProjectDatabaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudProjectDatabaseOutput)
}

type CloudProjectDatabaseOutput struct{ *pulumi.OutputState }

func (CloudProjectDatabaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudProjectDatabase)(nil)).Elem()
}

func (o CloudProjectDatabaseOutput) ToCloudProjectDatabaseOutput() CloudProjectDatabaseOutput {
	return o
}

func (o CloudProjectDatabaseOutput) ToCloudProjectDatabaseOutputWithContext(ctx context.Context) CloudProjectDatabaseOutput {
	return o
}

// Advanced configuration key / value
func (o CloudProjectDatabaseOutput) AdvancedConfiguration() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CloudProjectDatabase) pulumi.StringMapOutput { return v.AdvancedConfiguration }).(pulumi.StringMapOutput)
}

// List of region where backups are pushed. Not more than 1 regions for MongoDB. Not more than 2 regions for the other
// engines with one being the same as the nodes[].region field
func (o CloudProjectDatabaseOutput) BackupRegions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CloudProjectDatabase) pulumi.StringArrayOutput { return v.BackupRegions }).(pulumi.StringArrayOutput)
}

// Time on which backups start every day
func (o CloudProjectDatabaseOutput) BackupTime() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudProjectDatabase) pulumi.StringOutput { return v.BackupTime }).(pulumi.StringOutput)
}

// Date of the creation of the cluster
func (o CloudProjectDatabaseOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudProjectDatabase) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// Description of the cluster
func (o CloudProjectDatabaseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CloudProjectDatabase) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Disk size attributes of the cluster
func (o CloudProjectDatabaseOutput) DiskSize() pulumi.Float64Output {
	return o.ApplyT(func(v *CloudProjectDatabase) pulumi.Float64Output { return v.DiskSize }).(pulumi.Float64Output)
}

// Disk type attributes of the cluster
func (o CloudProjectDatabaseOutput) DiskType() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudProjectDatabase) pulumi.StringOutput { return v.DiskType }).(pulumi.StringOutput)
}

// List of all endpoints of the service
func (o CloudProjectDatabaseOutput) Endpoints() CloudProjectDatabaseEndpointArrayOutput {
	return o.ApplyT(func(v *CloudProjectDatabase) CloudProjectDatabaseEndpointArrayOutput { return v.Endpoints }).(CloudProjectDatabaseEndpointArrayOutput)
}

// Name of the engine of the service
func (o CloudProjectDatabaseOutput) Engine() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudProjectDatabase) pulumi.StringOutput { return v.Engine }).(pulumi.StringOutput)
}

// The node flavor used for this cluster
func (o CloudProjectDatabaseOutput) Flavor() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudProjectDatabase) pulumi.StringOutput { return v.Flavor }).(pulumi.StringOutput)
}

// IP Blocks authorized to access to the cluster
func (o CloudProjectDatabaseOutput) IpRestrictions() CloudProjectDatabaseIpRestrictionTypeArrayOutput {
	return o.ApplyT(func(v *CloudProjectDatabase) CloudProjectDatabaseIpRestrictionTypeArrayOutput {
		return v.IpRestrictions
	}).(CloudProjectDatabaseIpRestrictionTypeArrayOutput)
}

// Defines whether the REST API is enabled on a Kafka cluster
func (o CloudProjectDatabaseOutput) KafkaRestApi() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CloudProjectDatabase) pulumi.BoolPtrOutput { return v.KafkaRestApi }).(pulumi.BoolPtrOutput)
}

// Defines whether the schema registry is enabled on a Kafka cluster
func (o CloudProjectDatabaseOutput) KafkaSchemaRegistry() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CloudProjectDatabase) pulumi.BoolPtrOutput { return v.KafkaSchemaRegistry }).(pulumi.BoolPtrOutput)
}

// Time on which maintenances can start every day
func (o CloudProjectDatabaseOutput) MaintenanceTime() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudProjectDatabase) pulumi.StringOutput { return v.MaintenanceTime }).(pulumi.StringOutput)
}

// Type of network of the cluster
func (o CloudProjectDatabaseOutput) NetworkType() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudProjectDatabase) pulumi.StringOutput { return v.NetworkType }).(pulumi.StringOutput)
}

// List of nodes composing the service
func (o CloudProjectDatabaseOutput) Nodes() CloudProjectDatabaseNodeArrayOutput {
	return o.ApplyT(func(v *CloudProjectDatabase) CloudProjectDatabaseNodeArrayOutput { return v.Nodes }).(CloudProjectDatabaseNodeArrayOutput)
}

// Defines whether the ACLs are enabled on an Opensearch cluster
func (o CloudProjectDatabaseOutput) OpensearchAclsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CloudProjectDatabase) pulumi.BoolPtrOutput { return v.OpensearchAclsEnabled }).(pulumi.BoolPtrOutput)
}

// Plan of the cluster
func (o CloudProjectDatabaseOutput) Plan() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudProjectDatabase) pulumi.StringOutput { return v.Plan }).(pulumi.StringOutput)
}

func (o CloudProjectDatabaseOutput) ServiceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CloudProjectDatabase) pulumi.StringPtrOutput { return v.ServiceName }).(pulumi.StringPtrOutput)
}

// Current status of the cluster
func (o CloudProjectDatabaseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudProjectDatabase) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

func (o CloudProjectDatabaseOutput) Timeouts() CloudProjectDatabaseTimeoutsPtrOutput {
	return o.ApplyT(func(v *CloudProjectDatabase) CloudProjectDatabaseTimeoutsPtrOutput { return v.Timeouts }).(CloudProjectDatabaseTimeoutsPtrOutput)
}

// Version of the engine deployed on the cluster
func (o CloudProjectDatabaseOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudProjectDatabase) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CloudProjectDatabaseInput)(nil)).Elem(), &CloudProjectDatabase{})
	pulumi.RegisterOutputType(CloudProjectDatabaseOutput{})
}
