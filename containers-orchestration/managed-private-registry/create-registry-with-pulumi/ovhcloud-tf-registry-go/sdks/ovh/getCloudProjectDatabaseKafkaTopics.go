// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ovh

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-terraform-provider/sdks/go/ovh/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func GetCloudProjectDatabaseKafkaTopics(ctx *pulumi.Context, args *GetCloudProjectDatabaseKafkaTopicsArgs, opts ...pulumi.InvokeOption) (*GetCloudProjectDatabaseKafkaTopicsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var rv GetCloudProjectDatabaseKafkaTopicsResult
	err = ctx.InvokePackage("ovh:index/getCloudProjectDatabaseKafkaTopics:getCloudProjectDatabaseKafkaTopics", args, &rv, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getCloudProjectDatabaseKafkaTopics.
type GetCloudProjectDatabaseKafkaTopicsArgs struct {
	ClusterId   string  `pulumi:"clusterId"`
	Id          *string `pulumi:"id"`
	ServiceName *string `pulumi:"serviceName"`
}

// A collection of values returned by getCloudProjectDatabaseKafkaTopics.
type GetCloudProjectDatabaseKafkaTopicsResult struct {
	ClusterId   string   `pulumi:"clusterId"`
	Id          string   `pulumi:"id"`
	ServiceName *string  `pulumi:"serviceName"`
	TopicIds    []string `pulumi:"topicIds"`
}

func GetCloudProjectDatabaseKafkaTopicsOutput(ctx *pulumi.Context, args GetCloudProjectDatabaseKafkaTopicsOutputArgs, opts ...pulumi.InvokeOption) GetCloudProjectDatabaseKafkaTopicsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetCloudProjectDatabaseKafkaTopicsResult, error) {
			args := v.(GetCloudProjectDatabaseKafkaTopicsArgs)
			r, err := GetCloudProjectDatabaseKafkaTopics(ctx, &args, opts...)
			var s GetCloudProjectDatabaseKafkaTopicsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetCloudProjectDatabaseKafkaTopicsResultOutput)
}

// A collection of arguments for invoking getCloudProjectDatabaseKafkaTopics.
type GetCloudProjectDatabaseKafkaTopicsOutputArgs struct {
	ClusterId   pulumi.StringInput    `pulumi:"clusterId"`
	Id          pulumi.StringPtrInput `pulumi:"id"`
	ServiceName pulumi.StringPtrInput `pulumi:"serviceName"`
}

func (GetCloudProjectDatabaseKafkaTopicsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCloudProjectDatabaseKafkaTopicsArgs)(nil)).Elem()
}

// A collection of values returned by getCloudProjectDatabaseKafkaTopics.
type GetCloudProjectDatabaseKafkaTopicsResultOutput struct{ *pulumi.OutputState }

func (GetCloudProjectDatabaseKafkaTopicsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCloudProjectDatabaseKafkaTopicsResult)(nil)).Elem()
}

func (o GetCloudProjectDatabaseKafkaTopicsResultOutput) ToGetCloudProjectDatabaseKafkaTopicsResultOutput() GetCloudProjectDatabaseKafkaTopicsResultOutput {
	return o
}

func (o GetCloudProjectDatabaseKafkaTopicsResultOutput) ToGetCloudProjectDatabaseKafkaTopicsResultOutputWithContext(ctx context.Context) GetCloudProjectDatabaseKafkaTopicsResultOutput {
	return o
}

func (o GetCloudProjectDatabaseKafkaTopicsResultOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v GetCloudProjectDatabaseKafkaTopicsResult) string { return v.ClusterId }).(pulumi.StringOutput)
}

func (o GetCloudProjectDatabaseKafkaTopicsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetCloudProjectDatabaseKafkaTopicsResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetCloudProjectDatabaseKafkaTopicsResultOutput) ServiceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetCloudProjectDatabaseKafkaTopicsResult) *string { return v.ServiceName }).(pulumi.StringPtrOutput)
}

func (o GetCloudProjectDatabaseKafkaTopicsResultOutput) TopicIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetCloudProjectDatabaseKafkaTopicsResult) []string { return v.TopicIds }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetCloudProjectDatabaseKafkaTopicsResultOutput{})
}
