// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ovh

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/ovh/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DedicatedNashaPartitionSnapshot struct {
	pulumi.CustomResourceState

	PartitionName pulumi.StringOutput `pulumi:"partitionName"`
	ServiceName   pulumi.StringOutput `pulumi:"serviceName"`
	Type          pulumi.StringOutput `pulumi:"type"`
}

// NewDedicatedNashaPartitionSnapshot registers a new resource with the given unique name, arguments, and options.
func NewDedicatedNashaPartitionSnapshot(ctx *pulumi.Context,
	name string, args *DedicatedNashaPartitionSnapshotArgs, opts ...pulumi.ResourceOption) (*DedicatedNashaPartitionSnapshot, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PartitionName == nil {
		return nil, errors.New("invalid value for required argument 'PartitionName'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource DedicatedNashaPartitionSnapshot
	err = ctx.RegisterPackageResource("ovh:index/dedicatedNashaPartitionSnapshot:DedicatedNashaPartitionSnapshot", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDedicatedNashaPartitionSnapshot gets an existing DedicatedNashaPartitionSnapshot resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDedicatedNashaPartitionSnapshot(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DedicatedNashaPartitionSnapshotState, opts ...pulumi.ResourceOption) (*DedicatedNashaPartitionSnapshot, error) {
	var resource DedicatedNashaPartitionSnapshot
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("ovh:index/dedicatedNashaPartitionSnapshot:DedicatedNashaPartitionSnapshot", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DedicatedNashaPartitionSnapshot resources.
type dedicatedNashaPartitionSnapshotState struct {
	PartitionName *string `pulumi:"partitionName"`
	ServiceName   *string `pulumi:"serviceName"`
	Type          *string `pulumi:"type"`
}

type DedicatedNashaPartitionSnapshotState struct {
	PartitionName pulumi.StringPtrInput
	ServiceName   pulumi.StringPtrInput
	Type          pulumi.StringPtrInput
}

func (DedicatedNashaPartitionSnapshotState) ElementType() reflect.Type {
	return reflect.TypeOf((*dedicatedNashaPartitionSnapshotState)(nil)).Elem()
}

type dedicatedNashaPartitionSnapshotArgs struct {
	PartitionName string `pulumi:"partitionName"`
	ServiceName   string `pulumi:"serviceName"`
	Type          string `pulumi:"type"`
}

// The set of arguments for constructing a DedicatedNashaPartitionSnapshot resource.
type DedicatedNashaPartitionSnapshotArgs struct {
	PartitionName pulumi.StringInput
	ServiceName   pulumi.StringInput
	Type          pulumi.StringInput
}

func (DedicatedNashaPartitionSnapshotArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dedicatedNashaPartitionSnapshotArgs)(nil)).Elem()
}

type DedicatedNashaPartitionSnapshotInput interface {
	pulumi.Input

	ToDedicatedNashaPartitionSnapshotOutput() DedicatedNashaPartitionSnapshotOutput
	ToDedicatedNashaPartitionSnapshotOutputWithContext(ctx context.Context) DedicatedNashaPartitionSnapshotOutput
}

func (*DedicatedNashaPartitionSnapshot) ElementType() reflect.Type {
	return reflect.TypeOf((**DedicatedNashaPartitionSnapshot)(nil)).Elem()
}

func (i *DedicatedNashaPartitionSnapshot) ToDedicatedNashaPartitionSnapshotOutput() DedicatedNashaPartitionSnapshotOutput {
	return i.ToDedicatedNashaPartitionSnapshotOutputWithContext(context.Background())
}

func (i *DedicatedNashaPartitionSnapshot) ToDedicatedNashaPartitionSnapshotOutputWithContext(ctx context.Context) DedicatedNashaPartitionSnapshotOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DedicatedNashaPartitionSnapshotOutput)
}

type DedicatedNashaPartitionSnapshotOutput struct{ *pulumi.OutputState }

func (DedicatedNashaPartitionSnapshotOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DedicatedNashaPartitionSnapshot)(nil)).Elem()
}

func (o DedicatedNashaPartitionSnapshotOutput) ToDedicatedNashaPartitionSnapshotOutput() DedicatedNashaPartitionSnapshotOutput {
	return o
}

func (o DedicatedNashaPartitionSnapshotOutput) ToDedicatedNashaPartitionSnapshotOutputWithContext(ctx context.Context) DedicatedNashaPartitionSnapshotOutput {
	return o
}

func (o DedicatedNashaPartitionSnapshotOutput) PartitionName() pulumi.StringOutput {
	return o.ApplyT(func(v *DedicatedNashaPartitionSnapshot) pulumi.StringOutput { return v.PartitionName }).(pulumi.StringOutput)
}

func (o DedicatedNashaPartitionSnapshotOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v *DedicatedNashaPartitionSnapshot) pulumi.StringOutput { return v.ServiceName }).(pulumi.StringOutput)
}

func (o DedicatedNashaPartitionSnapshotOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *DedicatedNashaPartitionSnapshot) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DedicatedNashaPartitionSnapshotInput)(nil)).Elem(), &DedicatedNashaPartitionSnapshot{})
	pulumi.RegisterOutputType(DedicatedNashaPartitionSnapshotOutput{})
}
