// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ovh

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/ovh/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type CloudProjectDatabaseKafkaTopic struct {
	pulumi.CustomResourceState

	// Id of the database cluster
	ClusterId pulumi.StringOutput `pulumi:"clusterId"`
	// Minimum insync replica accepted for this topic
	MinInsyncReplicas pulumi.Float64Output `pulumi:"minInsyncReplicas"`
	// Name of the topic
	Name pulumi.StringOutput `pulumi:"name"`
	// Number of partitions for this topic
	Partitions pulumi.Float64Output `pulumi:"partitions"`
	// Number of replication for this topic
	Replication pulumi.Float64Output `pulumi:"replication"`
	// Number of bytes for the retention of the data for this topic
	RetentionBytes pulumi.Float64Output `pulumi:"retentionBytes"`
	// Number of hours for the retention of the data for this topic
	RetentionHours pulumi.Float64Output                            `pulumi:"retentionHours"`
	ServiceName    pulumi.StringPtrOutput                          `pulumi:"serviceName"`
	Timeouts       CloudProjectDatabaseKafkaTopicTimeoutsPtrOutput `pulumi:"timeouts"`
}

// NewCloudProjectDatabaseKafkaTopic registers a new resource with the given unique name, arguments, and options.
func NewCloudProjectDatabaseKafkaTopic(ctx *pulumi.Context,
	name string, args *CloudProjectDatabaseKafkaTopicArgs, opts ...pulumi.ResourceOption) (*CloudProjectDatabaseKafkaTopic, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterId == nil {
		return nil, errors.New("invalid value for required argument 'ClusterId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource CloudProjectDatabaseKafkaTopic
	err = ctx.RegisterPackageResource("ovh:index/cloudProjectDatabaseKafkaTopic:CloudProjectDatabaseKafkaTopic", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCloudProjectDatabaseKafkaTopic gets an existing CloudProjectDatabaseKafkaTopic resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCloudProjectDatabaseKafkaTopic(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CloudProjectDatabaseKafkaTopicState, opts ...pulumi.ResourceOption) (*CloudProjectDatabaseKafkaTopic, error) {
	var resource CloudProjectDatabaseKafkaTopic
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("ovh:index/cloudProjectDatabaseKafkaTopic:CloudProjectDatabaseKafkaTopic", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CloudProjectDatabaseKafkaTopic resources.
type cloudProjectDatabaseKafkaTopicState struct {
	// Id of the database cluster
	ClusterId *string `pulumi:"clusterId"`
	// Minimum insync replica accepted for this topic
	MinInsyncReplicas *float64 `pulumi:"minInsyncReplicas"`
	// Name of the topic
	Name *string `pulumi:"name"`
	// Number of partitions for this topic
	Partitions *float64 `pulumi:"partitions"`
	// Number of replication for this topic
	Replication *float64 `pulumi:"replication"`
	// Number of bytes for the retention of the data for this topic
	RetentionBytes *float64 `pulumi:"retentionBytes"`
	// Number of hours for the retention of the data for this topic
	RetentionHours *float64                                `pulumi:"retentionHours"`
	ServiceName    *string                                 `pulumi:"serviceName"`
	Timeouts       *CloudProjectDatabaseKafkaTopicTimeouts `pulumi:"timeouts"`
}

type CloudProjectDatabaseKafkaTopicState struct {
	// Id of the database cluster
	ClusterId pulumi.StringPtrInput
	// Minimum insync replica accepted for this topic
	MinInsyncReplicas pulumi.Float64PtrInput
	// Name of the topic
	Name pulumi.StringPtrInput
	// Number of partitions for this topic
	Partitions pulumi.Float64PtrInput
	// Number of replication for this topic
	Replication pulumi.Float64PtrInput
	// Number of bytes for the retention of the data for this topic
	RetentionBytes pulumi.Float64PtrInput
	// Number of hours for the retention of the data for this topic
	RetentionHours pulumi.Float64PtrInput
	ServiceName    pulumi.StringPtrInput
	Timeouts       CloudProjectDatabaseKafkaTopicTimeoutsPtrInput
}

func (CloudProjectDatabaseKafkaTopicState) ElementType() reflect.Type {
	return reflect.TypeOf((*cloudProjectDatabaseKafkaTopicState)(nil)).Elem()
}

type cloudProjectDatabaseKafkaTopicArgs struct {
	// Id of the database cluster
	ClusterId string `pulumi:"clusterId"`
	// Minimum insync replica accepted for this topic
	MinInsyncReplicas *float64 `pulumi:"minInsyncReplicas"`
	// Name of the topic
	Name *string `pulumi:"name"`
	// Number of partitions for this topic
	Partitions *float64 `pulumi:"partitions"`
	// Number of replication for this topic
	Replication *float64 `pulumi:"replication"`
	// Number of bytes for the retention of the data for this topic
	RetentionBytes *float64 `pulumi:"retentionBytes"`
	// Number of hours for the retention of the data for this topic
	RetentionHours *float64                                `pulumi:"retentionHours"`
	ServiceName    *string                                 `pulumi:"serviceName"`
	Timeouts       *CloudProjectDatabaseKafkaTopicTimeouts `pulumi:"timeouts"`
}

// The set of arguments for constructing a CloudProjectDatabaseKafkaTopic resource.
type CloudProjectDatabaseKafkaTopicArgs struct {
	// Id of the database cluster
	ClusterId pulumi.StringInput
	// Minimum insync replica accepted for this topic
	MinInsyncReplicas pulumi.Float64PtrInput
	// Name of the topic
	Name pulumi.StringPtrInput
	// Number of partitions for this topic
	Partitions pulumi.Float64PtrInput
	// Number of replication for this topic
	Replication pulumi.Float64PtrInput
	// Number of bytes for the retention of the data for this topic
	RetentionBytes pulumi.Float64PtrInput
	// Number of hours for the retention of the data for this topic
	RetentionHours pulumi.Float64PtrInput
	ServiceName    pulumi.StringPtrInput
	Timeouts       CloudProjectDatabaseKafkaTopicTimeoutsPtrInput
}

func (CloudProjectDatabaseKafkaTopicArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cloudProjectDatabaseKafkaTopicArgs)(nil)).Elem()
}

type CloudProjectDatabaseKafkaTopicInput interface {
	pulumi.Input

	ToCloudProjectDatabaseKafkaTopicOutput() CloudProjectDatabaseKafkaTopicOutput
	ToCloudProjectDatabaseKafkaTopicOutputWithContext(ctx context.Context) CloudProjectDatabaseKafkaTopicOutput
}

func (*CloudProjectDatabaseKafkaTopic) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudProjectDatabaseKafkaTopic)(nil)).Elem()
}

func (i *CloudProjectDatabaseKafkaTopic) ToCloudProjectDatabaseKafkaTopicOutput() CloudProjectDatabaseKafkaTopicOutput {
	return i.ToCloudProjectDatabaseKafkaTopicOutputWithContext(context.Background())
}

func (i *CloudProjectDatabaseKafkaTopic) ToCloudProjectDatabaseKafkaTopicOutputWithContext(ctx context.Context) CloudProjectDatabaseKafkaTopicOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudProjectDatabaseKafkaTopicOutput)
}

type CloudProjectDatabaseKafkaTopicOutput struct{ *pulumi.OutputState }

func (CloudProjectDatabaseKafkaTopicOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudProjectDatabaseKafkaTopic)(nil)).Elem()
}

func (o CloudProjectDatabaseKafkaTopicOutput) ToCloudProjectDatabaseKafkaTopicOutput() CloudProjectDatabaseKafkaTopicOutput {
	return o
}

func (o CloudProjectDatabaseKafkaTopicOutput) ToCloudProjectDatabaseKafkaTopicOutputWithContext(ctx context.Context) CloudProjectDatabaseKafkaTopicOutput {
	return o
}

// Id of the database cluster
func (o CloudProjectDatabaseKafkaTopicOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudProjectDatabaseKafkaTopic) pulumi.StringOutput { return v.ClusterId }).(pulumi.StringOutput)
}

// Minimum insync replica accepted for this topic
func (o CloudProjectDatabaseKafkaTopicOutput) MinInsyncReplicas() pulumi.Float64Output {
	return o.ApplyT(func(v *CloudProjectDatabaseKafkaTopic) pulumi.Float64Output { return v.MinInsyncReplicas }).(pulumi.Float64Output)
}

// Name of the topic
func (o CloudProjectDatabaseKafkaTopicOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudProjectDatabaseKafkaTopic) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Number of partitions for this topic
func (o CloudProjectDatabaseKafkaTopicOutput) Partitions() pulumi.Float64Output {
	return o.ApplyT(func(v *CloudProjectDatabaseKafkaTopic) pulumi.Float64Output { return v.Partitions }).(pulumi.Float64Output)
}

// Number of replication for this topic
func (o CloudProjectDatabaseKafkaTopicOutput) Replication() pulumi.Float64Output {
	return o.ApplyT(func(v *CloudProjectDatabaseKafkaTopic) pulumi.Float64Output { return v.Replication }).(pulumi.Float64Output)
}

// Number of bytes for the retention of the data for this topic
func (o CloudProjectDatabaseKafkaTopicOutput) RetentionBytes() pulumi.Float64Output {
	return o.ApplyT(func(v *CloudProjectDatabaseKafkaTopic) pulumi.Float64Output { return v.RetentionBytes }).(pulumi.Float64Output)
}

// Number of hours for the retention of the data for this topic
func (o CloudProjectDatabaseKafkaTopicOutput) RetentionHours() pulumi.Float64Output {
	return o.ApplyT(func(v *CloudProjectDatabaseKafkaTopic) pulumi.Float64Output { return v.RetentionHours }).(pulumi.Float64Output)
}

func (o CloudProjectDatabaseKafkaTopicOutput) ServiceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CloudProjectDatabaseKafkaTopic) pulumi.StringPtrOutput { return v.ServiceName }).(pulumi.StringPtrOutput)
}

func (o CloudProjectDatabaseKafkaTopicOutput) Timeouts() CloudProjectDatabaseKafkaTopicTimeoutsPtrOutput {
	return o.ApplyT(func(v *CloudProjectDatabaseKafkaTopic) CloudProjectDatabaseKafkaTopicTimeoutsPtrOutput {
		return v.Timeouts
	}).(CloudProjectDatabaseKafkaTopicTimeoutsPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CloudProjectDatabaseKafkaTopicInput)(nil)).Elem(), &CloudProjectDatabaseKafkaTopic{})
	pulumi.RegisterOutputType(CloudProjectDatabaseKafkaTopicOutput{})
}
