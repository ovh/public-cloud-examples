// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ovh

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/ovh/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type VrackIploadbalancing struct {
	pulumi.CustomResourceState

	// Your ipLoadbalancing
	IpLoadbalancing pulumi.StringOutput `pulumi:"ipLoadbalancing"`
	// The internal name of your vrack
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
}

// NewVrackIploadbalancing registers a new resource with the given unique name, arguments, and options.
func NewVrackIploadbalancing(ctx *pulumi.Context,
	name string, args *VrackIploadbalancingArgs, opts ...pulumi.ResourceOption) (*VrackIploadbalancing, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.IpLoadbalancing == nil {
		return nil, errors.New("invalid value for required argument 'IpLoadbalancing'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource VrackIploadbalancing
	err = ctx.RegisterPackageResource("ovh:index/vrackIploadbalancing:VrackIploadbalancing", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVrackIploadbalancing gets an existing VrackIploadbalancing resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVrackIploadbalancing(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VrackIploadbalancingState, opts ...pulumi.ResourceOption) (*VrackIploadbalancing, error) {
	var resource VrackIploadbalancing
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("ovh:index/vrackIploadbalancing:VrackIploadbalancing", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VrackIploadbalancing resources.
type vrackIploadbalancingState struct {
	// Your ipLoadbalancing
	IpLoadbalancing *string `pulumi:"ipLoadbalancing"`
	// The internal name of your vrack
	ServiceName *string `pulumi:"serviceName"`
}

type VrackIploadbalancingState struct {
	// Your ipLoadbalancing
	IpLoadbalancing pulumi.StringPtrInput
	// The internal name of your vrack
	ServiceName pulumi.StringPtrInput
}

func (VrackIploadbalancingState) ElementType() reflect.Type {
	return reflect.TypeOf((*vrackIploadbalancingState)(nil)).Elem()
}

type vrackIploadbalancingArgs struct {
	// Your ipLoadbalancing
	IpLoadbalancing string `pulumi:"ipLoadbalancing"`
	// The internal name of your vrack
	ServiceName string `pulumi:"serviceName"`
}

// The set of arguments for constructing a VrackIploadbalancing resource.
type VrackIploadbalancingArgs struct {
	// Your ipLoadbalancing
	IpLoadbalancing pulumi.StringInput
	// The internal name of your vrack
	ServiceName pulumi.StringInput
}

func (VrackIploadbalancingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vrackIploadbalancingArgs)(nil)).Elem()
}

type VrackIploadbalancingInput interface {
	pulumi.Input

	ToVrackIploadbalancingOutput() VrackIploadbalancingOutput
	ToVrackIploadbalancingOutputWithContext(ctx context.Context) VrackIploadbalancingOutput
}

func (*VrackIploadbalancing) ElementType() reflect.Type {
	return reflect.TypeOf((**VrackIploadbalancing)(nil)).Elem()
}

func (i *VrackIploadbalancing) ToVrackIploadbalancingOutput() VrackIploadbalancingOutput {
	return i.ToVrackIploadbalancingOutputWithContext(context.Background())
}

func (i *VrackIploadbalancing) ToVrackIploadbalancingOutputWithContext(ctx context.Context) VrackIploadbalancingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VrackIploadbalancingOutput)
}

type VrackIploadbalancingOutput struct{ *pulumi.OutputState }

func (VrackIploadbalancingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VrackIploadbalancing)(nil)).Elem()
}

func (o VrackIploadbalancingOutput) ToVrackIploadbalancingOutput() VrackIploadbalancingOutput {
	return o
}

func (o VrackIploadbalancingOutput) ToVrackIploadbalancingOutputWithContext(ctx context.Context) VrackIploadbalancingOutput {
	return o
}

// Your ipLoadbalancing
func (o VrackIploadbalancingOutput) IpLoadbalancing() pulumi.StringOutput {
	return o.ApplyT(func(v *VrackIploadbalancing) pulumi.StringOutput { return v.IpLoadbalancing }).(pulumi.StringOutput)
}

// The internal name of your vrack
func (o VrackIploadbalancingOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v *VrackIploadbalancing) pulumi.StringOutput { return v.ServiceName }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VrackIploadbalancingInput)(nil)).Elem(), &VrackIploadbalancing{})
	pulumi.RegisterOutputType(VrackIploadbalancingOutput{})
}
