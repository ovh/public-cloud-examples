// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ovh

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/ovh/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type HostingPrivatedatabaseDatabase struct {
	pulumi.CustomResourceState

	// Name of your new database
	DatabaseName pulumi.StringOutput `pulumi:"databaseName"`
	// The internal name of your private database
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
}

// NewHostingPrivatedatabaseDatabase registers a new resource with the given unique name, arguments, and options.
func NewHostingPrivatedatabaseDatabase(ctx *pulumi.Context,
	name string, args *HostingPrivatedatabaseDatabaseArgs, opts ...pulumi.ResourceOption) (*HostingPrivatedatabaseDatabase, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DatabaseName == nil {
		return nil, errors.New("invalid value for required argument 'DatabaseName'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource HostingPrivatedatabaseDatabase
	err = ctx.RegisterPackageResource("ovh:index/hostingPrivatedatabaseDatabase:HostingPrivatedatabaseDatabase", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHostingPrivatedatabaseDatabase gets an existing HostingPrivatedatabaseDatabase resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHostingPrivatedatabaseDatabase(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HostingPrivatedatabaseDatabaseState, opts ...pulumi.ResourceOption) (*HostingPrivatedatabaseDatabase, error) {
	var resource HostingPrivatedatabaseDatabase
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("ovh:index/hostingPrivatedatabaseDatabase:HostingPrivatedatabaseDatabase", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering HostingPrivatedatabaseDatabase resources.
type hostingPrivatedatabaseDatabaseState struct {
	// Name of your new database
	DatabaseName *string `pulumi:"databaseName"`
	// The internal name of your private database
	ServiceName *string `pulumi:"serviceName"`
}

type HostingPrivatedatabaseDatabaseState struct {
	// Name of your new database
	DatabaseName pulumi.StringPtrInput
	// The internal name of your private database
	ServiceName pulumi.StringPtrInput
}

func (HostingPrivatedatabaseDatabaseState) ElementType() reflect.Type {
	return reflect.TypeOf((*hostingPrivatedatabaseDatabaseState)(nil)).Elem()
}

type hostingPrivatedatabaseDatabaseArgs struct {
	// Name of your new database
	DatabaseName string `pulumi:"databaseName"`
	// The internal name of your private database
	ServiceName string `pulumi:"serviceName"`
}

// The set of arguments for constructing a HostingPrivatedatabaseDatabase resource.
type HostingPrivatedatabaseDatabaseArgs struct {
	// Name of your new database
	DatabaseName pulumi.StringInput
	// The internal name of your private database
	ServiceName pulumi.StringInput
}

func (HostingPrivatedatabaseDatabaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*hostingPrivatedatabaseDatabaseArgs)(nil)).Elem()
}

type HostingPrivatedatabaseDatabaseInput interface {
	pulumi.Input

	ToHostingPrivatedatabaseDatabaseOutput() HostingPrivatedatabaseDatabaseOutput
	ToHostingPrivatedatabaseDatabaseOutputWithContext(ctx context.Context) HostingPrivatedatabaseDatabaseOutput
}

func (*HostingPrivatedatabaseDatabase) ElementType() reflect.Type {
	return reflect.TypeOf((**HostingPrivatedatabaseDatabase)(nil)).Elem()
}

func (i *HostingPrivatedatabaseDatabase) ToHostingPrivatedatabaseDatabaseOutput() HostingPrivatedatabaseDatabaseOutput {
	return i.ToHostingPrivatedatabaseDatabaseOutputWithContext(context.Background())
}

func (i *HostingPrivatedatabaseDatabase) ToHostingPrivatedatabaseDatabaseOutputWithContext(ctx context.Context) HostingPrivatedatabaseDatabaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostingPrivatedatabaseDatabaseOutput)
}

type HostingPrivatedatabaseDatabaseOutput struct{ *pulumi.OutputState }

func (HostingPrivatedatabaseDatabaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HostingPrivatedatabaseDatabase)(nil)).Elem()
}

func (o HostingPrivatedatabaseDatabaseOutput) ToHostingPrivatedatabaseDatabaseOutput() HostingPrivatedatabaseDatabaseOutput {
	return o
}

func (o HostingPrivatedatabaseDatabaseOutput) ToHostingPrivatedatabaseDatabaseOutputWithContext(ctx context.Context) HostingPrivatedatabaseDatabaseOutput {
	return o
}

// Name of your new database
func (o HostingPrivatedatabaseDatabaseOutput) DatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v *HostingPrivatedatabaseDatabase) pulumi.StringOutput { return v.DatabaseName }).(pulumi.StringOutput)
}

// The internal name of your private database
func (o HostingPrivatedatabaseDatabaseOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v *HostingPrivatedatabaseDatabase) pulumi.StringOutput { return v.ServiceName }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HostingPrivatedatabaseDatabaseInput)(nil)).Elem(), &HostingPrivatedatabaseDatabase{})
	pulumi.RegisterOutputType(HostingPrivatedatabaseDatabaseOutput{})
}
