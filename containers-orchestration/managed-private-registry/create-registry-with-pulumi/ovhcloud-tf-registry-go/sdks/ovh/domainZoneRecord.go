// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ovh

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/ovh/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DomainZoneRecord struct {
	pulumi.CustomResourceState

	Fieldtype pulumi.StringOutput     `pulumi:"fieldtype"`
	Subdomain pulumi.StringPtrOutput  `pulumi:"subdomain"`
	Target    pulumi.StringOutput     `pulumi:"target"`
	Ttl       pulumi.Float64PtrOutput `pulumi:"ttl"`
	Zone      pulumi.StringOutput     `pulumi:"zone"`
}

// NewDomainZoneRecord registers a new resource with the given unique name, arguments, and options.
func NewDomainZoneRecord(ctx *pulumi.Context,
	name string, args *DomainZoneRecordArgs, opts ...pulumi.ResourceOption) (*DomainZoneRecord, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Fieldtype == nil {
		return nil, errors.New("invalid value for required argument 'Fieldtype'")
	}
	if args.Target == nil {
		return nil, errors.New("invalid value for required argument 'Target'")
	}
	if args.Zone == nil {
		return nil, errors.New("invalid value for required argument 'Zone'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource DomainZoneRecord
	err = ctx.RegisterPackageResource("ovh:index/domainZoneRecord:DomainZoneRecord", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDomainZoneRecord gets an existing DomainZoneRecord resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDomainZoneRecord(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DomainZoneRecordState, opts ...pulumi.ResourceOption) (*DomainZoneRecord, error) {
	var resource DomainZoneRecord
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("ovh:index/domainZoneRecord:DomainZoneRecord", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DomainZoneRecord resources.
type domainZoneRecordState struct {
	Fieldtype *string  `pulumi:"fieldtype"`
	Subdomain *string  `pulumi:"subdomain"`
	Target    *string  `pulumi:"target"`
	Ttl       *float64 `pulumi:"ttl"`
	Zone      *string  `pulumi:"zone"`
}

type DomainZoneRecordState struct {
	Fieldtype pulumi.StringPtrInput
	Subdomain pulumi.StringPtrInput
	Target    pulumi.StringPtrInput
	Ttl       pulumi.Float64PtrInput
	Zone      pulumi.StringPtrInput
}

func (DomainZoneRecordState) ElementType() reflect.Type {
	return reflect.TypeOf((*domainZoneRecordState)(nil)).Elem()
}

type domainZoneRecordArgs struct {
	Fieldtype string   `pulumi:"fieldtype"`
	Subdomain *string  `pulumi:"subdomain"`
	Target    string   `pulumi:"target"`
	Ttl       *float64 `pulumi:"ttl"`
	Zone      string   `pulumi:"zone"`
}

// The set of arguments for constructing a DomainZoneRecord resource.
type DomainZoneRecordArgs struct {
	Fieldtype pulumi.StringInput
	Subdomain pulumi.StringPtrInput
	Target    pulumi.StringInput
	Ttl       pulumi.Float64PtrInput
	Zone      pulumi.StringInput
}

func (DomainZoneRecordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*domainZoneRecordArgs)(nil)).Elem()
}

type DomainZoneRecordInput interface {
	pulumi.Input

	ToDomainZoneRecordOutput() DomainZoneRecordOutput
	ToDomainZoneRecordOutputWithContext(ctx context.Context) DomainZoneRecordOutput
}

func (*DomainZoneRecord) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainZoneRecord)(nil)).Elem()
}

func (i *DomainZoneRecord) ToDomainZoneRecordOutput() DomainZoneRecordOutput {
	return i.ToDomainZoneRecordOutputWithContext(context.Background())
}

func (i *DomainZoneRecord) ToDomainZoneRecordOutputWithContext(ctx context.Context) DomainZoneRecordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainZoneRecordOutput)
}

type DomainZoneRecordOutput struct{ *pulumi.OutputState }

func (DomainZoneRecordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainZoneRecord)(nil)).Elem()
}

func (o DomainZoneRecordOutput) ToDomainZoneRecordOutput() DomainZoneRecordOutput {
	return o
}

func (o DomainZoneRecordOutput) ToDomainZoneRecordOutputWithContext(ctx context.Context) DomainZoneRecordOutput {
	return o
}

func (o DomainZoneRecordOutput) Fieldtype() pulumi.StringOutput {
	return o.ApplyT(func(v *DomainZoneRecord) pulumi.StringOutput { return v.Fieldtype }).(pulumi.StringOutput)
}

func (o DomainZoneRecordOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainZoneRecord) pulumi.StringPtrOutput { return v.Subdomain }).(pulumi.StringPtrOutput)
}

func (o DomainZoneRecordOutput) Target() pulumi.StringOutput {
	return o.ApplyT(func(v *DomainZoneRecord) pulumi.StringOutput { return v.Target }).(pulumi.StringOutput)
}

func (o DomainZoneRecordOutput) Ttl() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *DomainZoneRecord) pulumi.Float64PtrOutput { return v.Ttl }).(pulumi.Float64PtrOutput)
}

func (o DomainZoneRecordOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v *DomainZoneRecord) pulumi.StringOutput { return v.Zone }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DomainZoneRecordInput)(nil)).Elem(), &DomainZoneRecord{})
	pulumi.RegisterOutputType(DomainZoneRecordOutput{})
}
