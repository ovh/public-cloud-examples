// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ovh

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/ovh/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type IpReverse struct {
	pulumi.CustomResourceState

	Ip        pulumi.StringOutput `pulumi:"ip"`
	IpReverse pulumi.StringOutput `pulumi:"ipReverse"`
	Reverse   pulumi.StringOutput `pulumi:"reverse"`
}

// NewIpReverse registers a new resource with the given unique name, arguments, and options.
func NewIpReverse(ctx *pulumi.Context,
	name string, args *IpReverseArgs, opts ...pulumi.ResourceOption) (*IpReverse, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Ip == nil {
		return nil, errors.New("invalid value for required argument 'Ip'")
	}
	if args.IpReverse == nil {
		return nil, errors.New("invalid value for required argument 'IpReverse'")
	}
	if args.Reverse == nil {
		return nil, errors.New("invalid value for required argument 'Reverse'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource IpReverse
	err = ctx.RegisterPackageResource("ovh:index/ipReverse:IpReverse", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIpReverse gets an existing IpReverse resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIpReverse(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IpReverseState, opts ...pulumi.ResourceOption) (*IpReverse, error) {
	var resource IpReverse
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("ovh:index/ipReverse:IpReverse", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IpReverse resources.
type ipReverseState struct {
	Ip        *string `pulumi:"ip"`
	IpReverse *string `pulumi:"ipReverse"`
	Reverse   *string `pulumi:"reverse"`
}

type IpReverseState struct {
	Ip        pulumi.StringPtrInput
	IpReverse pulumi.StringPtrInput
	Reverse   pulumi.StringPtrInput
}

func (IpReverseState) ElementType() reflect.Type {
	return reflect.TypeOf((*ipReverseState)(nil)).Elem()
}

type ipReverseArgs struct {
	Ip        string `pulumi:"ip"`
	IpReverse string `pulumi:"ipReverse"`
	Reverse   string `pulumi:"reverse"`
}

// The set of arguments for constructing a IpReverse resource.
type IpReverseArgs struct {
	Ip        pulumi.StringInput
	IpReverse pulumi.StringInput
	Reverse   pulumi.StringInput
}

func (IpReverseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ipReverseArgs)(nil)).Elem()
}

type IpReverseInput interface {
	pulumi.Input

	ToIpReverseOutput() IpReverseOutput
	ToIpReverseOutputWithContext(ctx context.Context) IpReverseOutput
}

func (*IpReverse) ElementType() reflect.Type {
	return reflect.TypeOf((**IpReverse)(nil)).Elem()
}

func (i *IpReverse) ToIpReverseOutput() IpReverseOutput {
	return i.ToIpReverseOutputWithContext(context.Background())
}

func (i *IpReverse) ToIpReverseOutputWithContext(ctx context.Context) IpReverseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpReverseOutput)
}

type IpReverseOutput struct{ *pulumi.OutputState }

func (IpReverseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IpReverse)(nil)).Elem()
}

func (o IpReverseOutput) ToIpReverseOutput() IpReverseOutput {
	return o
}

func (o IpReverseOutput) ToIpReverseOutputWithContext(ctx context.Context) IpReverseOutput {
	return o
}

func (o IpReverseOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v *IpReverse) pulumi.StringOutput { return v.Ip }).(pulumi.StringOutput)
}

func (o IpReverseOutput) IpReverse() pulumi.StringOutput {
	return o.ApplyT(func(v *IpReverse) pulumi.StringOutput { return v.IpReverse }).(pulumi.StringOutput)
}

func (o IpReverseOutput) Reverse() pulumi.StringOutput {
	return o.ApplyT(func(v *IpReverse) pulumi.StringOutput { return v.Reverse }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IpReverseInput)(nil)).Elem(), &IpReverse{})
	pulumi.RegisterOutputType(IpReverseOutput{})
}
