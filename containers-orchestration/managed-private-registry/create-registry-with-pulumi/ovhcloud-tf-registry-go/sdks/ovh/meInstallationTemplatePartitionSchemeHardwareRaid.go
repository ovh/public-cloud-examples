// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ovh

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/ovh/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type MeInstallationTemplatePartitionSchemeHardwareRaid struct {
	pulumi.CustomResourceState

	// Disk List. Syntax is cX:dY for disks and [cX:dY,cX:dY] for groups. With X and Y resp. the controller id and the disk id
	Disks pulumi.StringArrayOutput `pulumi:"disks"`
	// RAID mode (raid0, raid1, raid10, raid5, raid50, raid6, raid60)
	Mode pulumi.StringOutput `pulumi:"mode"`
	// Hardware RAID name
	Name pulumi.StringOutput `pulumi:"name"`
	// name of this partitioning scheme
	SchemeName pulumi.StringOutput `pulumi:"schemeName"`
	// Specifies the creation order of the hardware RAID
	Step pulumi.Float64Output `pulumi:"step"`
	// Template name
	TemplateName pulumi.StringOutput `pulumi:"templateName"`
}

// NewMeInstallationTemplatePartitionSchemeHardwareRaid registers a new resource with the given unique name, arguments, and options.
func NewMeInstallationTemplatePartitionSchemeHardwareRaid(ctx *pulumi.Context,
	name string, args *MeInstallationTemplatePartitionSchemeHardwareRaidArgs, opts ...pulumi.ResourceOption) (*MeInstallationTemplatePartitionSchemeHardwareRaid, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Disks == nil {
		return nil, errors.New("invalid value for required argument 'Disks'")
	}
	if args.Mode == nil {
		return nil, errors.New("invalid value for required argument 'Mode'")
	}
	if args.SchemeName == nil {
		return nil, errors.New("invalid value for required argument 'SchemeName'")
	}
	if args.Step == nil {
		return nil, errors.New("invalid value for required argument 'Step'")
	}
	if args.TemplateName == nil {
		return nil, errors.New("invalid value for required argument 'TemplateName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource MeInstallationTemplatePartitionSchemeHardwareRaid
	err = ctx.RegisterPackageResource("ovh:index/meInstallationTemplatePartitionSchemeHardwareRaid:MeInstallationTemplatePartitionSchemeHardwareRaid", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMeInstallationTemplatePartitionSchemeHardwareRaid gets an existing MeInstallationTemplatePartitionSchemeHardwareRaid resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMeInstallationTemplatePartitionSchemeHardwareRaid(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MeInstallationTemplatePartitionSchemeHardwareRaidState, opts ...pulumi.ResourceOption) (*MeInstallationTemplatePartitionSchemeHardwareRaid, error) {
	var resource MeInstallationTemplatePartitionSchemeHardwareRaid
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("ovh:index/meInstallationTemplatePartitionSchemeHardwareRaid:MeInstallationTemplatePartitionSchemeHardwareRaid", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MeInstallationTemplatePartitionSchemeHardwareRaid resources.
type meInstallationTemplatePartitionSchemeHardwareRaidState struct {
	// Disk List. Syntax is cX:dY for disks and [cX:dY,cX:dY] for groups. With X and Y resp. the controller id and the disk id
	Disks []string `pulumi:"disks"`
	// RAID mode (raid0, raid1, raid10, raid5, raid50, raid6, raid60)
	Mode *string `pulumi:"mode"`
	// Hardware RAID name
	Name *string `pulumi:"name"`
	// name of this partitioning scheme
	SchemeName *string `pulumi:"schemeName"`
	// Specifies the creation order of the hardware RAID
	Step *float64 `pulumi:"step"`
	// Template name
	TemplateName *string `pulumi:"templateName"`
}

type MeInstallationTemplatePartitionSchemeHardwareRaidState struct {
	// Disk List. Syntax is cX:dY for disks and [cX:dY,cX:dY] for groups. With X and Y resp. the controller id and the disk id
	Disks pulumi.StringArrayInput
	// RAID mode (raid0, raid1, raid10, raid5, raid50, raid6, raid60)
	Mode pulumi.StringPtrInput
	// Hardware RAID name
	Name pulumi.StringPtrInput
	// name of this partitioning scheme
	SchemeName pulumi.StringPtrInput
	// Specifies the creation order of the hardware RAID
	Step pulumi.Float64PtrInput
	// Template name
	TemplateName pulumi.StringPtrInput
}

func (MeInstallationTemplatePartitionSchemeHardwareRaidState) ElementType() reflect.Type {
	return reflect.TypeOf((*meInstallationTemplatePartitionSchemeHardwareRaidState)(nil)).Elem()
}

type meInstallationTemplatePartitionSchemeHardwareRaidArgs struct {
	// Disk List. Syntax is cX:dY for disks and [cX:dY,cX:dY] for groups. With X and Y resp. the controller id and the disk id
	Disks []string `pulumi:"disks"`
	// RAID mode (raid0, raid1, raid10, raid5, raid50, raid6, raid60)
	Mode string `pulumi:"mode"`
	// Hardware RAID name
	Name *string `pulumi:"name"`
	// name of this partitioning scheme
	SchemeName string `pulumi:"schemeName"`
	// Specifies the creation order of the hardware RAID
	Step float64 `pulumi:"step"`
	// Template name
	TemplateName string `pulumi:"templateName"`
}

// The set of arguments for constructing a MeInstallationTemplatePartitionSchemeHardwareRaid resource.
type MeInstallationTemplatePartitionSchemeHardwareRaidArgs struct {
	// Disk List. Syntax is cX:dY for disks and [cX:dY,cX:dY] for groups. With X and Y resp. the controller id and the disk id
	Disks pulumi.StringArrayInput
	// RAID mode (raid0, raid1, raid10, raid5, raid50, raid6, raid60)
	Mode pulumi.StringInput
	// Hardware RAID name
	Name pulumi.StringPtrInput
	// name of this partitioning scheme
	SchemeName pulumi.StringInput
	// Specifies the creation order of the hardware RAID
	Step pulumi.Float64Input
	// Template name
	TemplateName pulumi.StringInput
}

func (MeInstallationTemplatePartitionSchemeHardwareRaidArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*meInstallationTemplatePartitionSchemeHardwareRaidArgs)(nil)).Elem()
}

type MeInstallationTemplatePartitionSchemeHardwareRaidInput interface {
	pulumi.Input

	ToMeInstallationTemplatePartitionSchemeHardwareRaidOutput() MeInstallationTemplatePartitionSchemeHardwareRaidOutput
	ToMeInstallationTemplatePartitionSchemeHardwareRaidOutputWithContext(ctx context.Context) MeInstallationTemplatePartitionSchemeHardwareRaidOutput
}

func (*MeInstallationTemplatePartitionSchemeHardwareRaid) ElementType() reflect.Type {
	return reflect.TypeOf((**MeInstallationTemplatePartitionSchemeHardwareRaid)(nil)).Elem()
}

func (i *MeInstallationTemplatePartitionSchemeHardwareRaid) ToMeInstallationTemplatePartitionSchemeHardwareRaidOutput() MeInstallationTemplatePartitionSchemeHardwareRaidOutput {
	return i.ToMeInstallationTemplatePartitionSchemeHardwareRaidOutputWithContext(context.Background())
}

func (i *MeInstallationTemplatePartitionSchemeHardwareRaid) ToMeInstallationTemplatePartitionSchemeHardwareRaidOutputWithContext(ctx context.Context) MeInstallationTemplatePartitionSchemeHardwareRaidOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MeInstallationTemplatePartitionSchemeHardwareRaidOutput)
}

type MeInstallationTemplatePartitionSchemeHardwareRaidOutput struct{ *pulumi.OutputState }

func (MeInstallationTemplatePartitionSchemeHardwareRaidOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MeInstallationTemplatePartitionSchemeHardwareRaid)(nil)).Elem()
}

func (o MeInstallationTemplatePartitionSchemeHardwareRaidOutput) ToMeInstallationTemplatePartitionSchemeHardwareRaidOutput() MeInstallationTemplatePartitionSchemeHardwareRaidOutput {
	return o
}

func (o MeInstallationTemplatePartitionSchemeHardwareRaidOutput) ToMeInstallationTemplatePartitionSchemeHardwareRaidOutputWithContext(ctx context.Context) MeInstallationTemplatePartitionSchemeHardwareRaidOutput {
	return o
}

// Disk List. Syntax is cX:dY for disks and [cX:dY,cX:dY] for groups. With X and Y resp. the controller id and the disk id
func (o MeInstallationTemplatePartitionSchemeHardwareRaidOutput) Disks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *MeInstallationTemplatePartitionSchemeHardwareRaid) pulumi.StringArrayOutput { return v.Disks }).(pulumi.StringArrayOutput)
}

// RAID mode (raid0, raid1, raid10, raid5, raid50, raid6, raid60)
func (o MeInstallationTemplatePartitionSchemeHardwareRaidOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v *MeInstallationTemplatePartitionSchemeHardwareRaid) pulumi.StringOutput { return v.Mode }).(pulumi.StringOutput)
}

// Hardware RAID name
func (o MeInstallationTemplatePartitionSchemeHardwareRaidOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *MeInstallationTemplatePartitionSchemeHardwareRaid) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// name of this partitioning scheme
func (o MeInstallationTemplatePartitionSchemeHardwareRaidOutput) SchemeName() pulumi.StringOutput {
	return o.ApplyT(func(v *MeInstallationTemplatePartitionSchemeHardwareRaid) pulumi.StringOutput { return v.SchemeName }).(pulumi.StringOutput)
}

// Specifies the creation order of the hardware RAID
func (o MeInstallationTemplatePartitionSchemeHardwareRaidOutput) Step() pulumi.Float64Output {
	return o.ApplyT(func(v *MeInstallationTemplatePartitionSchemeHardwareRaid) pulumi.Float64Output { return v.Step }).(pulumi.Float64Output)
}

// Template name
func (o MeInstallationTemplatePartitionSchemeHardwareRaidOutput) TemplateName() pulumi.StringOutput {
	return o.ApplyT(func(v *MeInstallationTemplatePartitionSchemeHardwareRaid) pulumi.StringOutput { return v.TemplateName }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MeInstallationTemplatePartitionSchemeHardwareRaidInput)(nil)).Elem(), &MeInstallationTemplatePartitionSchemeHardwareRaid{})
	pulumi.RegisterOutputType(MeInstallationTemplatePartitionSchemeHardwareRaidOutput{})
}
