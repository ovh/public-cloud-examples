// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ovh

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/ovh/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type IploadbalancingTcpRoute struct {
	pulumi.CustomResourceState

	// Action triggered when all rules match
	Action IploadbalancingTcpRouteActionOutput `pulumi:"action"`
	// Human readable name for your route, this field is for you
	DisplayName pulumi.StringPtrOutput `pulumi:"displayName"`
	// Route traffic for this frontend
	FrontendId pulumi.Float64Output `pulumi:"frontendId"`
	// List of rules to match to trigger action
	Rules IploadbalancingTcpRouteRuleTypeArrayOutput `pulumi:"rules"`
	// The internal name of your IP load balancing
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
	// Route status. Routes in "ok" state are ready to operate
	Status pulumi.StringOutput `pulumi:"status"`
	// Route priority ([0..255]). 0 if null. Highest priority routes are evaluated last. Only the first matching route will
	// trigger an action
	Weight pulumi.Float64Output `pulumi:"weight"`
}

// NewIploadbalancingTcpRoute registers a new resource with the given unique name, arguments, and options.
func NewIploadbalancingTcpRoute(ctx *pulumi.Context,
	name string, args *IploadbalancingTcpRouteArgs, opts ...pulumi.ResourceOption) (*IploadbalancingTcpRoute, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Action == nil {
		return nil, errors.New("invalid value for required argument 'Action'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource IploadbalancingTcpRoute
	err = ctx.RegisterPackageResource("ovh:index/iploadbalancingTcpRoute:IploadbalancingTcpRoute", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIploadbalancingTcpRoute gets an existing IploadbalancingTcpRoute resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIploadbalancingTcpRoute(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IploadbalancingTcpRouteState, opts ...pulumi.ResourceOption) (*IploadbalancingTcpRoute, error) {
	var resource IploadbalancingTcpRoute
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("ovh:index/iploadbalancingTcpRoute:IploadbalancingTcpRoute", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IploadbalancingTcpRoute resources.
type iploadbalancingTcpRouteState struct {
	// Action triggered when all rules match
	Action *IploadbalancingTcpRouteAction `pulumi:"action"`
	// Human readable name for your route, this field is for you
	DisplayName *string `pulumi:"displayName"`
	// Route traffic for this frontend
	FrontendId *float64 `pulumi:"frontendId"`
	// List of rules to match to trigger action
	Rules []IploadbalancingTcpRouteRuleType `pulumi:"rules"`
	// The internal name of your IP load balancing
	ServiceName *string `pulumi:"serviceName"`
	// Route status. Routes in "ok" state are ready to operate
	Status *string `pulumi:"status"`
	// Route priority ([0..255]). 0 if null. Highest priority routes are evaluated last. Only the first matching route will
	// trigger an action
	Weight *float64 `pulumi:"weight"`
}

type IploadbalancingTcpRouteState struct {
	// Action triggered when all rules match
	Action IploadbalancingTcpRouteActionPtrInput
	// Human readable name for your route, this field is for you
	DisplayName pulumi.StringPtrInput
	// Route traffic for this frontend
	FrontendId pulumi.Float64PtrInput
	// List of rules to match to trigger action
	Rules IploadbalancingTcpRouteRuleTypeArrayInput
	// The internal name of your IP load balancing
	ServiceName pulumi.StringPtrInput
	// Route status. Routes in "ok" state are ready to operate
	Status pulumi.StringPtrInput
	// Route priority ([0..255]). 0 if null. Highest priority routes are evaluated last. Only the first matching route will
	// trigger an action
	Weight pulumi.Float64PtrInput
}

func (IploadbalancingTcpRouteState) ElementType() reflect.Type {
	return reflect.TypeOf((*iploadbalancingTcpRouteState)(nil)).Elem()
}

type iploadbalancingTcpRouteArgs struct {
	// Action triggered when all rules match
	Action IploadbalancingTcpRouteAction `pulumi:"action"`
	// Human readable name for your route, this field is for you
	DisplayName *string `pulumi:"displayName"`
	// Route traffic for this frontend
	FrontendId *float64 `pulumi:"frontendId"`
	// The internal name of your IP load balancing
	ServiceName string `pulumi:"serviceName"`
	// Route priority ([0..255]). 0 if null. Highest priority routes are evaluated last. Only the first matching route will
	// trigger an action
	Weight *float64 `pulumi:"weight"`
}

// The set of arguments for constructing a IploadbalancingTcpRoute resource.
type IploadbalancingTcpRouteArgs struct {
	// Action triggered when all rules match
	Action IploadbalancingTcpRouteActionInput
	// Human readable name for your route, this field is for you
	DisplayName pulumi.StringPtrInput
	// Route traffic for this frontend
	FrontendId pulumi.Float64PtrInput
	// The internal name of your IP load balancing
	ServiceName pulumi.StringInput
	// Route priority ([0..255]). 0 if null. Highest priority routes are evaluated last. Only the first matching route will
	// trigger an action
	Weight pulumi.Float64PtrInput
}

func (IploadbalancingTcpRouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*iploadbalancingTcpRouteArgs)(nil)).Elem()
}

type IploadbalancingTcpRouteInput interface {
	pulumi.Input

	ToIploadbalancingTcpRouteOutput() IploadbalancingTcpRouteOutput
	ToIploadbalancingTcpRouteOutputWithContext(ctx context.Context) IploadbalancingTcpRouteOutput
}

func (*IploadbalancingTcpRoute) ElementType() reflect.Type {
	return reflect.TypeOf((**IploadbalancingTcpRoute)(nil)).Elem()
}

func (i *IploadbalancingTcpRoute) ToIploadbalancingTcpRouteOutput() IploadbalancingTcpRouteOutput {
	return i.ToIploadbalancingTcpRouteOutputWithContext(context.Background())
}

func (i *IploadbalancingTcpRoute) ToIploadbalancingTcpRouteOutputWithContext(ctx context.Context) IploadbalancingTcpRouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IploadbalancingTcpRouteOutput)
}

type IploadbalancingTcpRouteOutput struct{ *pulumi.OutputState }

func (IploadbalancingTcpRouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IploadbalancingTcpRoute)(nil)).Elem()
}

func (o IploadbalancingTcpRouteOutput) ToIploadbalancingTcpRouteOutput() IploadbalancingTcpRouteOutput {
	return o
}

func (o IploadbalancingTcpRouteOutput) ToIploadbalancingTcpRouteOutputWithContext(ctx context.Context) IploadbalancingTcpRouteOutput {
	return o
}

// Action triggered when all rules match
func (o IploadbalancingTcpRouteOutput) Action() IploadbalancingTcpRouteActionOutput {
	return o.ApplyT(func(v *IploadbalancingTcpRoute) IploadbalancingTcpRouteActionOutput { return v.Action }).(IploadbalancingTcpRouteActionOutput)
}

// Human readable name for your route, this field is for you
func (o IploadbalancingTcpRouteOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IploadbalancingTcpRoute) pulumi.StringPtrOutput { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Route traffic for this frontend
func (o IploadbalancingTcpRouteOutput) FrontendId() pulumi.Float64Output {
	return o.ApplyT(func(v *IploadbalancingTcpRoute) pulumi.Float64Output { return v.FrontendId }).(pulumi.Float64Output)
}

// List of rules to match to trigger action
func (o IploadbalancingTcpRouteOutput) Rules() IploadbalancingTcpRouteRuleTypeArrayOutput {
	return o.ApplyT(func(v *IploadbalancingTcpRoute) IploadbalancingTcpRouteRuleTypeArrayOutput { return v.Rules }).(IploadbalancingTcpRouteRuleTypeArrayOutput)
}

// The internal name of your IP load balancing
func (o IploadbalancingTcpRouteOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v *IploadbalancingTcpRoute) pulumi.StringOutput { return v.ServiceName }).(pulumi.StringOutput)
}

// Route status. Routes in "ok" state are ready to operate
func (o IploadbalancingTcpRouteOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *IploadbalancingTcpRoute) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Route priority ([0..255]). 0 if null. Highest priority routes are evaluated last. Only the first matching route will
// trigger an action
func (o IploadbalancingTcpRouteOutput) Weight() pulumi.Float64Output {
	return o.ApplyT(func(v *IploadbalancingTcpRoute) pulumi.Float64Output { return v.Weight }).(pulumi.Float64Output)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IploadbalancingTcpRouteInput)(nil)).Elem(), &IploadbalancingTcpRoute{})
	pulumi.RegisterOutputType(IploadbalancingTcpRouteOutput{})
}
