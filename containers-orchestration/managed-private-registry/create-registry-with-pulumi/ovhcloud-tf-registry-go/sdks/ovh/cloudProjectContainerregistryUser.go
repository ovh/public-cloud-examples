// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ovh

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/ovh/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type CloudProjectContainerregistryUser struct {
	pulumi.CustomResourceState

	// User email.
	Email pulumi.StringOutput `pulumi:"email"`
	// Registry name
	Login pulumi.StringOutput `pulumi:"login"`
	// User password
	Password pulumi.StringOutput `pulumi:"password"`
	// RegistryID
	RegistryId pulumi.StringOutput `pulumi:"registryId"`
	// Service name
	ServiceName pulumi.StringPtrOutput `pulumi:"serviceName"`
	// User name
	User pulumi.StringOutput `pulumi:"user"`
}

// NewCloudProjectContainerregistryUser registers a new resource with the given unique name, arguments, and options.
func NewCloudProjectContainerregistryUser(ctx *pulumi.Context,
	name string, args *CloudProjectContainerregistryUserArgs, opts ...pulumi.ResourceOption) (*CloudProjectContainerregistryUser, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Email == nil {
		return nil, errors.New("invalid value for required argument 'Email'")
	}
	if args.Login == nil {
		return nil, errors.New("invalid value for required argument 'Login'")
	}
	if args.RegistryId == nil {
		return nil, errors.New("invalid value for required argument 'RegistryId'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource CloudProjectContainerregistryUser
	err = ctx.RegisterPackageResource("ovh:index/cloudProjectContainerregistryUser:CloudProjectContainerregistryUser", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCloudProjectContainerregistryUser gets an existing CloudProjectContainerregistryUser resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCloudProjectContainerregistryUser(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CloudProjectContainerregistryUserState, opts ...pulumi.ResourceOption) (*CloudProjectContainerregistryUser, error) {
	var resource CloudProjectContainerregistryUser
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("ovh:index/cloudProjectContainerregistryUser:CloudProjectContainerregistryUser", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CloudProjectContainerregistryUser resources.
type cloudProjectContainerregistryUserState struct {
	// User email.
	Email *string `pulumi:"email"`
	// Registry name
	Login *string `pulumi:"login"`
	// User password
	Password *string `pulumi:"password"`
	// RegistryID
	RegistryId *string `pulumi:"registryId"`
	// Service name
	ServiceName *string `pulumi:"serviceName"`
	// User name
	User *string `pulumi:"user"`
}

type CloudProjectContainerregistryUserState struct {
	// User email.
	Email pulumi.StringPtrInput
	// Registry name
	Login pulumi.StringPtrInput
	// User password
	Password pulumi.StringPtrInput
	// RegistryID
	RegistryId pulumi.StringPtrInput
	// Service name
	ServiceName pulumi.StringPtrInput
	// User name
	User pulumi.StringPtrInput
}

func (CloudProjectContainerregistryUserState) ElementType() reflect.Type {
	return reflect.TypeOf((*cloudProjectContainerregistryUserState)(nil)).Elem()
}

type cloudProjectContainerregistryUserArgs struct {
	// User email.
	Email string `pulumi:"email"`
	// Registry name
	Login string `pulumi:"login"`
	// RegistryID
	RegistryId string `pulumi:"registryId"`
	// Service name
	ServiceName *string `pulumi:"serviceName"`
}

// The set of arguments for constructing a CloudProjectContainerregistryUser resource.
type CloudProjectContainerregistryUserArgs struct {
	// User email.
	Email pulumi.StringInput
	// Registry name
	Login pulumi.StringInput
	// RegistryID
	RegistryId pulumi.StringInput
	// Service name
	ServiceName pulumi.StringPtrInput
}

func (CloudProjectContainerregistryUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cloudProjectContainerregistryUserArgs)(nil)).Elem()
}

type CloudProjectContainerregistryUserInput interface {
	pulumi.Input

	ToCloudProjectContainerregistryUserOutput() CloudProjectContainerregistryUserOutput
	ToCloudProjectContainerregistryUserOutputWithContext(ctx context.Context) CloudProjectContainerregistryUserOutput
}

func (*CloudProjectContainerregistryUser) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudProjectContainerregistryUser)(nil)).Elem()
}

func (i *CloudProjectContainerregistryUser) ToCloudProjectContainerregistryUserOutput() CloudProjectContainerregistryUserOutput {
	return i.ToCloudProjectContainerregistryUserOutputWithContext(context.Background())
}

func (i *CloudProjectContainerregistryUser) ToCloudProjectContainerregistryUserOutputWithContext(ctx context.Context) CloudProjectContainerregistryUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudProjectContainerregistryUserOutput)
}

type CloudProjectContainerregistryUserOutput struct{ *pulumi.OutputState }

func (CloudProjectContainerregistryUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudProjectContainerregistryUser)(nil)).Elem()
}

func (o CloudProjectContainerregistryUserOutput) ToCloudProjectContainerregistryUserOutput() CloudProjectContainerregistryUserOutput {
	return o
}

func (o CloudProjectContainerregistryUserOutput) ToCloudProjectContainerregistryUserOutputWithContext(ctx context.Context) CloudProjectContainerregistryUserOutput {
	return o
}

// User email.
func (o CloudProjectContainerregistryUserOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudProjectContainerregistryUser) pulumi.StringOutput { return v.Email }).(pulumi.StringOutput)
}

// Registry name
func (o CloudProjectContainerregistryUserOutput) Login() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudProjectContainerregistryUser) pulumi.StringOutput { return v.Login }).(pulumi.StringOutput)
}

// User password
func (o CloudProjectContainerregistryUserOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudProjectContainerregistryUser) pulumi.StringOutput { return v.Password }).(pulumi.StringOutput)
}

// RegistryID
func (o CloudProjectContainerregistryUserOutput) RegistryId() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudProjectContainerregistryUser) pulumi.StringOutput { return v.RegistryId }).(pulumi.StringOutput)
}

// Service name
func (o CloudProjectContainerregistryUserOutput) ServiceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CloudProjectContainerregistryUser) pulumi.StringPtrOutput { return v.ServiceName }).(pulumi.StringPtrOutput)
}

// User name
func (o CloudProjectContainerregistryUserOutput) User() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudProjectContainerregistryUser) pulumi.StringOutput { return v.User }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CloudProjectContainerregistryUserInput)(nil)).Elem(), &CloudProjectContainerregistryUser{})
	pulumi.RegisterOutputType(CloudProjectContainerregistryUserOutput{})
}
