// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ovh

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/ovh/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DedicatedNashaPartitionAccess struct {
	pulumi.CustomResourceState

	// A brief description of the ACL
	AclDescription pulumi.StringPtrOutput `pulumi:"aclDescription"`
	Ip             pulumi.StringOutput    `pulumi:"ip"`
	PartitionName  pulumi.StringOutput    `pulumi:"partitionName"`
	ServiceName    pulumi.StringOutput    `pulumi:"serviceName"`
	Type           pulumi.StringPtrOutput `pulumi:"type"`
}

// NewDedicatedNashaPartitionAccess registers a new resource with the given unique name, arguments, and options.
func NewDedicatedNashaPartitionAccess(ctx *pulumi.Context,
	name string, args *DedicatedNashaPartitionAccessArgs, opts ...pulumi.ResourceOption) (*DedicatedNashaPartitionAccess, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Ip == nil {
		return nil, errors.New("invalid value for required argument 'Ip'")
	}
	if args.PartitionName == nil {
		return nil, errors.New("invalid value for required argument 'PartitionName'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource DedicatedNashaPartitionAccess
	err = ctx.RegisterPackageResource("ovh:index/dedicatedNashaPartitionAccess:DedicatedNashaPartitionAccess", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDedicatedNashaPartitionAccess gets an existing DedicatedNashaPartitionAccess resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDedicatedNashaPartitionAccess(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DedicatedNashaPartitionAccessState, opts ...pulumi.ResourceOption) (*DedicatedNashaPartitionAccess, error) {
	var resource DedicatedNashaPartitionAccess
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("ovh:index/dedicatedNashaPartitionAccess:DedicatedNashaPartitionAccess", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DedicatedNashaPartitionAccess resources.
type dedicatedNashaPartitionAccessState struct {
	// A brief description of the ACL
	AclDescription *string `pulumi:"aclDescription"`
	Ip             *string `pulumi:"ip"`
	PartitionName  *string `pulumi:"partitionName"`
	ServiceName    *string `pulumi:"serviceName"`
	Type           *string `pulumi:"type"`
}

type DedicatedNashaPartitionAccessState struct {
	// A brief description of the ACL
	AclDescription pulumi.StringPtrInput
	Ip             pulumi.StringPtrInput
	PartitionName  pulumi.StringPtrInput
	ServiceName    pulumi.StringPtrInput
	Type           pulumi.StringPtrInput
}

func (DedicatedNashaPartitionAccessState) ElementType() reflect.Type {
	return reflect.TypeOf((*dedicatedNashaPartitionAccessState)(nil)).Elem()
}

type dedicatedNashaPartitionAccessArgs struct {
	// A brief description of the ACL
	AclDescription *string `pulumi:"aclDescription"`
	Ip             string  `pulumi:"ip"`
	PartitionName  string  `pulumi:"partitionName"`
	ServiceName    string  `pulumi:"serviceName"`
	Type           *string `pulumi:"type"`
}

// The set of arguments for constructing a DedicatedNashaPartitionAccess resource.
type DedicatedNashaPartitionAccessArgs struct {
	// A brief description of the ACL
	AclDescription pulumi.StringPtrInput
	Ip             pulumi.StringInput
	PartitionName  pulumi.StringInput
	ServiceName    pulumi.StringInput
	Type           pulumi.StringPtrInput
}

func (DedicatedNashaPartitionAccessArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dedicatedNashaPartitionAccessArgs)(nil)).Elem()
}

type DedicatedNashaPartitionAccessInput interface {
	pulumi.Input

	ToDedicatedNashaPartitionAccessOutput() DedicatedNashaPartitionAccessOutput
	ToDedicatedNashaPartitionAccessOutputWithContext(ctx context.Context) DedicatedNashaPartitionAccessOutput
}

func (*DedicatedNashaPartitionAccess) ElementType() reflect.Type {
	return reflect.TypeOf((**DedicatedNashaPartitionAccess)(nil)).Elem()
}

func (i *DedicatedNashaPartitionAccess) ToDedicatedNashaPartitionAccessOutput() DedicatedNashaPartitionAccessOutput {
	return i.ToDedicatedNashaPartitionAccessOutputWithContext(context.Background())
}

func (i *DedicatedNashaPartitionAccess) ToDedicatedNashaPartitionAccessOutputWithContext(ctx context.Context) DedicatedNashaPartitionAccessOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DedicatedNashaPartitionAccessOutput)
}

type DedicatedNashaPartitionAccessOutput struct{ *pulumi.OutputState }

func (DedicatedNashaPartitionAccessOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DedicatedNashaPartitionAccess)(nil)).Elem()
}

func (o DedicatedNashaPartitionAccessOutput) ToDedicatedNashaPartitionAccessOutput() DedicatedNashaPartitionAccessOutput {
	return o
}

func (o DedicatedNashaPartitionAccessOutput) ToDedicatedNashaPartitionAccessOutputWithContext(ctx context.Context) DedicatedNashaPartitionAccessOutput {
	return o
}

// A brief description of the ACL
func (o DedicatedNashaPartitionAccessOutput) AclDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DedicatedNashaPartitionAccess) pulumi.StringPtrOutput { return v.AclDescription }).(pulumi.StringPtrOutput)
}

func (o DedicatedNashaPartitionAccessOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v *DedicatedNashaPartitionAccess) pulumi.StringOutput { return v.Ip }).(pulumi.StringOutput)
}

func (o DedicatedNashaPartitionAccessOutput) PartitionName() pulumi.StringOutput {
	return o.ApplyT(func(v *DedicatedNashaPartitionAccess) pulumi.StringOutput { return v.PartitionName }).(pulumi.StringOutput)
}

func (o DedicatedNashaPartitionAccessOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v *DedicatedNashaPartitionAccess) pulumi.StringOutput { return v.ServiceName }).(pulumi.StringOutput)
}

func (o DedicatedNashaPartitionAccessOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DedicatedNashaPartitionAccess) pulumi.StringPtrOutput { return v.Type }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DedicatedNashaPartitionAccessInput)(nil)).Elem(), &DedicatedNashaPartitionAccess{})
	pulumi.RegisterOutputType(DedicatedNashaPartitionAccessOutput{})
}
