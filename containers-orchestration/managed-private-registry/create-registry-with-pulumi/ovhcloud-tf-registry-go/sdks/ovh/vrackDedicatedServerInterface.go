// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ovh

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/ovh/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type VrackDedicatedServerInterface struct {
	pulumi.CustomResourceState

	InterfaceId pulumi.StringOutput `pulumi:"interfaceId"`
	// Service name of the vrack resource.
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
}

// NewVrackDedicatedServerInterface registers a new resource with the given unique name, arguments, and options.
func NewVrackDedicatedServerInterface(ctx *pulumi.Context,
	name string, args *VrackDedicatedServerInterfaceArgs, opts ...pulumi.ResourceOption) (*VrackDedicatedServerInterface, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InterfaceId == nil {
		return nil, errors.New("invalid value for required argument 'InterfaceId'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource VrackDedicatedServerInterface
	err = ctx.RegisterPackageResource("ovh:index/vrackDedicatedServerInterface:VrackDedicatedServerInterface", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVrackDedicatedServerInterface gets an existing VrackDedicatedServerInterface resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVrackDedicatedServerInterface(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VrackDedicatedServerInterfaceState, opts ...pulumi.ResourceOption) (*VrackDedicatedServerInterface, error) {
	var resource VrackDedicatedServerInterface
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("ovh:index/vrackDedicatedServerInterface:VrackDedicatedServerInterface", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VrackDedicatedServerInterface resources.
type vrackDedicatedServerInterfaceState struct {
	InterfaceId *string `pulumi:"interfaceId"`
	// Service name of the vrack resource.
	ServiceName *string `pulumi:"serviceName"`
}

type VrackDedicatedServerInterfaceState struct {
	InterfaceId pulumi.StringPtrInput
	// Service name of the vrack resource.
	ServiceName pulumi.StringPtrInput
}

func (VrackDedicatedServerInterfaceState) ElementType() reflect.Type {
	return reflect.TypeOf((*vrackDedicatedServerInterfaceState)(nil)).Elem()
}

type vrackDedicatedServerInterfaceArgs struct {
	InterfaceId string `pulumi:"interfaceId"`
	// Service name of the vrack resource.
	ServiceName string `pulumi:"serviceName"`
}

// The set of arguments for constructing a VrackDedicatedServerInterface resource.
type VrackDedicatedServerInterfaceArgs struct {
	InterfaceId pulumi.StringInput
	// Service name of the vrack resource.
	ServiceName pulumi.StringInput
}

func (VrackDedicatedServerInterfaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vrackDedicatedServerInterfaceArgs)(nil)).Elem()
}

type VrackDedicatedServerInterfaceInput interface {
	pulumi.Input

	ToVrackDedicatedServerInterfaceOutput() VrackDedicatedServerInterfaceOutput
	ToVrackDedicatedServerInterfaceOutputWithContext(ctx context.Context) VrackDedicatedServerInterfaceOutput
}

func (*VrackDedicatedServerInterface) ElementType() reflect.Type {
	return reflect.TypeOf((**VrackDedicatedServerInterface)(nil)).Elem()
}

func (i *VrackDedicatedServerInterface) ToVrackDedicatedServerInterfaceOutput() VrackDedicatedServerInterfaceOutput {
	return i.ToVrackDedicatedServerInterfaceOutputWithContext(context.Background())
}

func (i *VrackDedicatedServerInterface) ToVrackDedicatedServerInterfaceOutputWithContext(ctx context.Context) VrackDedicatedServerInterfaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VrackDedicatedServerInterfaceOutput)
}

type VrackDedicatedServerInterfaceOutput struct{ *pulumi.OutputState }

func (VrackDedicatedServerInterfaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VrackDedicatedServerInterface)(nil)).Elem()
}

func (o VrackDedicatedServerInterfaceOutput) ToVrackDedicatedServerInterfaceOutput() VrackDedicatedServerInterfaceOutput {
	return o
}

func (o VrackDedicatedServerInterfaceOutput) ToVrackDedicatedServerInterfaceOutputWithContext(ctx context.Context) VrackDedicatedServerInterfaceOutput {
	return o
}

func (o VrackDedicatedServerInterfaceOutput) InterfaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *VrackDedicatedServerInterface) pulumi.StringOutput { return v.InterfaceId }).(pulumi.StringOutput)
}

// Service name of the vrack resource.
func (o VrackDedicatedServerInterfaceOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v *VrackDedicatedServerInterface) pulumi.StringOutput { return v.ServiceName }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VrackDedicatedServerInterfaceInput)(nil)).Elem(), &VrackDedicatedServerInterface{})
	pulumi.RegisterOutputType(VrackDedicatedServerInterfaceOutput{})
}
