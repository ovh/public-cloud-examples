// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ovh

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/ovh/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type CloudProjectDatabaseRedisUser struct {
	pulumi.CustomResourceState

	// Categories of the user
	Categories pulumi.StringArrayOutput `pulumi:"categories"`
	// Channels of the user
	Channels pulumi.StringArrayOutput `pulumi:"channels"`
	// Id of the database cluster
	ClusterId pulumi.StringOutput `pulumi:"clusterId"`
	// Commands of the user
	Commands pulumi.StringArrayOutput `pulumi:"commands"`
	// Date of the creation of the user
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Keys of the user
	Keys pulumi.StringArrayOutput `pulumi:"keys"`
	// Name of the user
	Name pulumi.StringOutput `pulumi:"name"`
	// Password of the user
	Password pulumi.StringOutput `pulumi:"password"`
	// Arbitrary string to change to trigger a password update
	PasswordReset pulumi.StringPtrOutput `pulumi:"passwordReset"`
	ServiceName   pulumi.StringPtrOutput `pulumi:"serviceName"`
	// Current status of the user
	Status   pulumi.StringOutput                            `pulumi:"status"`
	Timeouts CloudProjectDatabaseRedisUserTimeoutsPtrOutput `pulumi:"timeouts"`
}

// NewCloudProjectDatabaseRedisUser registers a new resource with the given unique name, arguments, and options.
func NewCloudProjectDatabaseRedisUser(ctx *pulumi.Context,
	name string, args *CloudProjectDatabaseRedisUserArgs, opts ...pulumi.ResourceOption) (*CloudProjectDatabaseRedisUser, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterId == nil {
		return nil, errors.New("invalid value for required argument 'ClusterId'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource CloudProjectDatabaseRedisUser
	err = ctx.RegisterPackageResource("ovh:index/cloudProjectDatabaseRedisUser:CloudProjectDatabaseRedisUser", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCloudProjectDatabaseRedisUser gets an existing CloudProjectDatabaseRedisUser resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCloudProjectDatabaseRedisUser(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CloudProjectDatabaseRedisUserState, opts ...pulumi.ResourceOption) (*CloudProjectDatabaseRedisUser, error) {
	var resource CloudProjectDatabaseRedisUser
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("ovh:index/cloudProjectDatabaseRedisUser:CloudProjectDatabaseRedisUser", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CloudProjectDatabaseRedisUser resources.
type cloudProjectDatabaseRedisUserState struct {
	// Categories of the user
	Categories []string `pulumi:"categories"`
	// Channels of the user
	Channels []string `pulumi:"channels"`
	// Id of the database cluster
	ClusterId *string `pulumi:"clusterId"`
	// Commands of the user
	Commands []string `pulumi:"commands"`
	// Date of the creation of the user
	CreatedAt *string `pulumi:"createdAt"`
	// Keys of the user
	Keys []string `pulumi:"keys"`
	// Name of the user
	Name *string `pulumi:"name"`
	// Password of the user
	Password *string `pulumi:"password"`
	// Arbitrary string to change to trigger a password update
	PasswordReset *string `pulumi:"passwordReset"`
	ServiceName   *string `pulumi:"serviceName"`
	// Current status of the user
	Status   *string                                `pulumi:"status"`
	Timeouts *CloudProjectDatabaseRedisUserTimeouts `pulumi:"timeouts"`
}

type CloudProjectDatabaseRedisUserState struct {
	// Categories of the user
	Categories pulumi.StringArrayInput
	// Channels of the user
	Channels pulumi.StringArrayInput
	// Id of the database cluster
	ClusterId pulumi.StringPtrInput
	// Commands of the user
	Commands pulumi.StringArrayInput
	// Date of the creation of the user
	CreatedAt pulumi.StringPtrInput
	// Keys of the user
	Keys pulumi.StringArrayInput
	// Name of the user
	Name pulumi.StringPtrInput
	// Password of the user
	Password pulumi.StringPtrInput
	// Arbitrary string to change to trigger a password update
	PasswordReset pulumi.StringPtrInput
	ServiceName   pulumi.StringPtrInput
	// Current status of the user
	Status   pulumi.StringPtrInput
	Timeouts CloudProjectDatabaseRedisUserTimeoutsPtrInput
}

func (CloudProjectDatabaseRedisUserState) ElementType() reflect.Type {
	return reflect.TypeOf((*cloudProjectDatabaseRedisUserState)(nil)).Elem()
}

type cloudProjectDatabaseRedisUserArgs struct {
	// Categories of the user
	Categories []string `pulumi:"categories"`
	// Channels of the user
	Channels []string `pulumi:"channels"`
	// Id of the database cluster
	ClusterId string `pulumi:"clusterId"`
	// Commands of the user
	Commands []string `pulumi:"commands"`
	// Keys of the user
	Keys []string `pulumi:"keys"`
	// Name of the user
	Name *string `pulumi:"name"`
	// Arbitrary string to change to trigger a password update
	PasswordReset *string                                `pulumi:"passwordReset"`
	ServiceName   *string                                `pulumi:"serviceName"`
	Timeouts      *CloudProjectDatabaseRedisUserTimeouts `pulumi:"timeouts"`
}

// The set of arguments for constructing a CloudProjectDatabaseRedisUser resource.
type CloudProjectDatabaseRedisUserArgs struct {
	// Categories of the user
	Categories pulumi.StringArrayInput
	// Channels of the user
	Channels pulumi.StringArrayInput
	// Id of the database cluster
	ClusterId pulumi.StringInput
	// Commands of the user
	Commands pulumi.StringArrayInput
	// Keys of the user
	Keys pulumi.StringArrayInput
	// Name of the user
	Name pulumi.StringPtrInput
	// Arbitrary string to change to trigger a password update
	PasswordReset pulumi.StringPtrInput
	ServiceName   pulumi.StringPtrInput
	Timeouts      CloudProjectDatabaseRedisUserTimeoutsPtrInput
}

func (CloudProjectDatabaseRedisUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cloudProjectDatabaseRedisUserArgs)(nil)).Elem()
}

type CloudProjectDatabaseRedisUserInput interface {
	pulumi.Input

	ToCloudProjectDatabaseRedisUserOutput() CloudProjectDatabaseRedisUserOutput
	ToCloudProjectDatabaseRedisUserOutputWithContext(ctx context.Context) CloudProjectDatabaseRedisUserOutput
}

func (*CloudProjectDatabaseRedisUser) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudProjectDatabaseRedisUser)(nil)).Elem()
}

func (i *CloudProjectDatabaseRedisUser) ToCloudProjectDatabaseRedisUserOutput() CloudProjectDatabaseRedisUserOutput {
	return i.ToCloudProjectDatabaseRedisUserOutputWithContext(context.Background())
}

func (i *CloudProjectDatabaseRedisUser) ToCloudProjectDatabaseRedisUserOutputWithContext(ctx context.Context) CloudProjectDatabaseRedisUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudProjectDatabaseRedisUserOutput)
}

type CloudProjectDatabaseRedisUserOutput struct{ *pulumi.OutputState }

func (CloudProjectDatabaseRedisUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudProjectDatabaseRedisUser)(nil)).Elem()
}

func (o CloudProjectDatabaseRedisUserOutput) ToCloudProjectDatabaseRedisUserOutput() CloudProjectDatabaseRedisUserOutput {
	return o
}

func (o CloudProjectDatabaseRedisUserOutput) ToCloudProjectDatabaseRedisUserOutputWithContext(ctx context.Context) CloudProjectDatabaseRedisUserOutput {
	return o
}

// Categories of the user
func (o CloudProjectDatabaseRedisUserOutput) Categories() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CloudProjectDatabaseRedisUser) pulumi.StringArrayOutput { return v.Categories }).(pulumi.StringArrayOutput)
}

// Channels of the user
func (o CloudProjectDatabaseRedisUserOutput) Channels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CloudProjectDatabaseRedisUser) pulumi.StringArrayOutput { return v.Channels }).(pulumi.StringArrayOutput)
}

// Id of the database cluster
func (o CloudProjectDatabaseRedisUserOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudProjectDatabaseRedisUser) pulumi.StringOutput { return v.ClusterId }).(pulumi.StringOutput)
}

// Commands of the user
func (o CloudProjectDatabaseRedisUserOutput) Commands() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CloudProjectDatabaseRedisUser) pulumi.StringArrayOutput { return v.Commands }).(pulumi.StringArrayOutput)
}

// Date of the creation of the user
func (o CloudProjectDatabaseRedisUserOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudProjectDatabaseRedisUser) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// Keys of the user
func (o CloudProjectDatabaseRedisUserOutput) Keys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CloudProjectDatabaseRedisUser) pulumi.StringArrayOutput { return v.Keys }).(pulumi.StringArrayOutput)
}

// Name of the user
func (o CloudProjectDatabaseRedisUserOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudProjectDatabaseRedisUser) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Password of the user
func (o CloudProjectDatabaseRedisUserOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudProjectDatabaseRedisUser) pulumi.StringOutput { return v.Password }).(pulumi.StringOutput)
}

// Arbitrary string to change to trigger a password update
func (o CloudProjectDatabaseRedisUserOutput) PasswordReset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CloudProjectDatabaseRedisUser) pulumi.StringPtrOutput { return v.PasswordReset }).(pulumi.StringPtrOutput)
}

func (o CloudProjectDatabaseRedisUserOutput) ServiceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CloudProjectDatabaseRedisUser) pulumi.StringPtrOutput { return v.ServiceName }).(pulumi.StringPtrOutput)
}

// Current status of the user
func (o CloudProjectDatabaseRedisUserOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudProjectDatabaseRedisUser) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

func (o CloudProjectDatabaseRedisUserOutput) Timeouts() CloudProjectDatabaseRedisUserTimeoutsPtrOutput {
	return o.ApplyT(func(v *CloudProjectDatabaseRedisUser) CloudProjectDatabaseRedisUserTimeoutsPtrOutput {
		return v.Timeouts
	}).(CloudProjectDatabaseRedisUserTimeoutsPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CloudProjectDatabaseRedisUserInput)(nil)).Elem(), &CloudProjectDatabaseRedisUser{})
	pulumi.RegisterOutputType(CloudProjectDatabaseRedisUserOutput{})
}
