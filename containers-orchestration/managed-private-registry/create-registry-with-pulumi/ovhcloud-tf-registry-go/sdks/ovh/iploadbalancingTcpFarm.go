// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ovh

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/ovh/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type IploadbalancingTcpFarm struct {
	pulumi.CustomResourceState

	Balance        pulumi.StringPtrOutput               `pulumi:"balance"`
	DisplayName    pulumi.StringPtrOutput               `pulumi:"displayName"`
	Port           pulumi.Float64PtrOutput              `pulumi:"port"`
	Probe          IploadbalancingTcpFarmProbePtrOutput `pulumi:"probe"`
	ServiceName    pulumi.StringOutput                  `pulumi:"serviceName"`
	Stickiness     pulumi.StringPtrOutput               `pulumi:"stickiness"`
	VrackNetworkId pulumi.Float64PtrOutput              `pulumi:"vrackNetworkId"`
	Zone           pulumi.StringOutput                  `pulumi:"zone"`
}

// NewIploadbalancingTcpFarm registers a new resource with the given unique name, arguments, and options.
func NewIploadbalancingTcpFarm(ctx *pulumi.Context,
	name string, args *IploadbalancingTcpFarmArgs, opts ...pulumi.ResourceOption) (*IploadbalancingTcpFarm, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	if args.Zone == nil {
		return nil, errors.New("invalid value for required argument 'Zone'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource IploadbalancingTcpFarm
	err = ctx.RegisterPackageResource("ovh:index/iploadbalancingTcpFarm:IploadbalancingTcpFarm", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIploadbalancingTcpFarm gets an existing IploadbalancingTcpFarm resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIploadbalancingTcpFarm(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IploadbalancingTcpFarmState, opts ...pulumi.ResourceOption) (*IploadbalancingTcpFarm, error) {
	var resource IploadbalancingTcpFarm
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("ovh:index/iploadbalancingTcpFarm:IploadbalancingTcpFarm", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IploadbalancingTcpFarm resources.
type iploadbalancingTcpFarmState struct {
	Balance        *string                      `pulumi:"balance"`
	DisplayName    *string                      `pulumi:"displayName"`
	Port           *float64                     `pulumi:"port"`
	Probe          *IploadbalancingTcpFarmProbe `pulumi:"probe"`
	ServiceName    *string                      `pulumi:"serviceName"`
	Stickiness     *string                      `pulumi:"stickiness"`
	VrackNetworkId *float64                     `pulumi:"vrackNetworkId"`
	Zone           *string                      `pulumi:"zone"`
}

type IploadbalancingTcpFarmState struct {
	Balance        pulumi.StringPtrInput
	DisplayName    pulumi.StringPtrInput
	Port           pulumi.Float64PtrInput
	Probe          IploadbalancingTcpFarmProbePtrInput
	ServiceName    pulumi.StringPtrInput
	Stickiness     pulumi.StringPtrInput
	VrackNetworkId pulumi.Float64PtrInput
	Zone           pulumi.StringPtrInput
}

func (IploadbalancingTcpFarmState) ElementType() reflect.Type {
	return reflect.TypeOf((*iploadbalancingTcpFarmState)(nil)).Elem()
}

type iploadbalancingTcpFarmArgs struct {
	Balance        *string                      `pulumi:"balance"`
	DisplayName    *string                      `pulumi:"displayName"`
	Port           *float64                     `pulumi:"port"`
	Probe          *IploadbalancingTcpFarmProbe `pulumi:"probe"`
	ServiceName    string                       `pulumi:"serviceName"`
	Stickiness     *string                      `pulumi:"stickiness"`
	VrackNetworkId *float64                     `pulumi:"vrackNetworkId"`
	Zone           string                       `pulumi:"zone"`
}

// The set of arguments for constructing a IploadbalancingTcpFarm resource.
type IploadbalancingTcpFarmArgs struct {
	Balance        pulumi.StringPtrInput
	DisplayName    pulumi.StringPtrInput
	Port           pulumi.Float64PtrInput
	Probe          IploadbalancingTcpFarmProbePtrInput
	ServiceName    pulumi.StringInput
	Stickiness     pulumi.StringPtrInput
	VrackNetworkId pulumi.Float64PtrInput
	Zone           pulumi.StringInput
}

func (IploadbalancingTcpFarmArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*iploadbalancingTcpFarmArgs)(nil)).Elem()
}

type IploadbalancingTcpFarmInput interface {
	pulumi.Input

	ToIploadbalancingTcpFarmOutput() IploadbalancingTcpFarmOutput
	ToIploadbalancingTcpFarmOutputWithContext(ctx context.Context) IploadbalancingTcpFarmOutput
}

func (*IploadbalancingTcpFarm) ElementType() reflect.Type {
	return reflect.TypeOf((**IploadbalancingTcpFarm)(nil)).Elem()
}

func (i *IploadbalancingTcpFarm) ToIploadbalancingTcpFarmOutput() IploadbalancingTcpFarmOutput {
	return i.ToIploadbalancingTcpFarmOutputWithContext(context.Background())
}

func (i *IploadbalancingTcpFarm) ToIploadbalancingTcpFarmOutputWithContext(ctx context.Context) IploadbalancingTcpFarmOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IploadbalancingTcpFarmOutput)
}

type IploadbalancingTcpFarmOutput struct{ *pulumi.OutputState }

func (IploadbalancingTcpFarmOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IploadbalancingTcpFarm)(nil)).Elem()
}

func (o IploadbalancingTcpFarmOutput) ToIploadbalancingTcpFarmOutput() IploadbalancingTcpFarmOutput {
	return o
}

func (o IploadbalancingTcpFarmOutput) ToIploadbalancingTcpFarmOutputWithContext(ctx context.Context) IploadbalancingTcpFarmOutput {
	return o
}

func (o IploadbalancingTcpFarmOutput) Balance() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IploadbalancingTcpFarm) pulumi.StringPtrOutput { return v.Balance }).(pulumi.StringPtrOutput)
}

func (o IploadbalancingTcpFarmOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IploadbalancingTcpFarm) pulumi.StringPtrOutput { return v.DisplayName }).(pulumi.StringPtrOutput)
}

func (o IploadbalancingTcpFarmOutput) Port() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *IploadbalancingTcpFarm) pulumi.Float64PtrOutput { return v.Port }).(pulumi.Float64PtrOutput)
}

func (o IploadbalancingTcpFarmOutput) Probe() IploadbalancingTcpFarmProbePtrOutput {
	return o.ApplyT(func(v *IploadbalancingTcpFarm) IploadbalancingTcpFarmProbePtrOutput { return v.Probe }).(IploadbalancingTcpFarmProbePtrOutput)
}

func (o IploadbalancingTcpFarmOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v *IploadbalancingTcpFarm) pulumi.StringOutput { return v.ServiceName }).(pulumi.StringOutput)
}

func (o IploadbalancingTcpFarmOutput) Stickiness() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IploadbalancingTcpFarm) pulumi.StringPtrOutput { return v.Stickiness }).(pulumi.StringPtrOutput)
}

func (o IploadbalancingTcpFarmOutput) VrackNetworkId() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *IploadbalancingTcpFarm) pulumi.Float64PtrOutput { return v.VrackNetworkId }).(pulumi.Float64PtrOutput)
}

func (o IploadbalancingTcpFarmOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v *IploadbalancingTcpFarm) pulumi.StringOutput { return v.Zone }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IploadbalancingTcpFarmInput)(nil)).Elem(), &IploadbalancingTcpFarm{})
	pulumi.RegisterOutputType(IploadbalancingTcpFarmOutput{})
}
