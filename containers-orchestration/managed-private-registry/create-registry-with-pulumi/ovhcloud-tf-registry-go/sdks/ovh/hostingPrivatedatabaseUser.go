// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ovh

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/ovh/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type HostingPrivatedatabaseUser struct {
	pulumi.CustomResourceState

	// Password for the new user ( alphanumeric and 8 characters minimum )
	Password pulumi.StringOutput `pulumi:"password"`
	// The internal name of your private database
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
	// User name used to connect on your databases
	UserName pulumi.StringOutput `pulumi:"userName"`
}

// NewHostingPrivatedatabaseUser registers a new resource with the given unique name, arguments, and options.
func NewHostingPrivatedatabaseUser(ctx *pulumi.Context,
	name string, args *HostingPrivatedatabaseUserArgs, opts ...pulumi.ResourceOption) (*HostingPrivatedatabaseUser, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Password == nil {
		return nil, errors.New("invalid value for required argument 'Password'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	if args.UserName == nil {
		return nil, errors.New("invalid value for required argument 'UserName'")
	}
	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource HostingPrivatedatabaseUser
	err = ctx.RegisterPackageResource("ovh:index/hostingPrivatedatabaseUser:HostingPrivatedatabaseUser", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHostingPrivatedatabaseUser gets an existing HostingPrivatedatabaseUser resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHostingPrivatedatabaseUser(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HostingPrivatedatabaseUserState, opts ...pulumi.ResourceOption) (*HostingPrivatedatabaseUser, error) {
	var resource HostingPrivatedatabaseUser
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("ovh:index/hostingPrivatedatabaseUser:HostingPrivatedatabaseUser", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering HostingPrivatedatabaseUser resources.
type hostingPrivatedatabaseUserState struct {
	// Password for the new user ( alphanumeric and 8 characters minimum )
	Password *string `pulumi:"password"`
	// The internal name of your private database
	ServiceName *string `pulumi:"serviceName"`
	// User name used to connect on your databases
	UserName *string `pulumi:"userName"`
}

type HostingPrivatedatabaseUserState struct {
	// Password for the new user ( alphanumeric and 8 characters minimum )
	Password pulumi.StringPtrInput
	// The internal name of your private database
	ServiceName pulumi.StringPtrInput
	// User name used to connect on your databases
	UserName pulumi.StringPtrInput
}

func (HostingPrivatedatabaseUserState) ElementType() reflect.Type {
	return reflect.TypeOf((*hostingPrivatedatabaseUserState)(nil)).Elem()
}

type hostingPrivatedatabaseUserArgs struct {
	// Password for the new user ( alphanumeric and 8 characters minimum )
	Password string `pulumi:"password"`
	// The internal name of your private database
	ServiceName string `pulumi:"serviceName"`
	// User name used to connect on your databases
	UserName string `pulumi:"userName"`
}

// The set of arguments for constructing a HostingPrivatedatabaseUser resource.
type HostingPrivatedatabaseUserArgs struct {
	// Password for the new user ( alphanumeric and 8 characters minimum )
	Password pulumi.StringInput
	// The internal name of your private database
	ServiceName pulumi.StringInput
	// User name used to connect on your databases
	UserName pulumi.StringInput
}

func (HostingPrivatedatabaseUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*hostingPrivatedatabaseUserArgs)(nil)).Elem()
}

type HostingPrivatedatabaseUserInput interface {
	pulumi.Input

	ToHostingPrivatedatabaseUserOutput() HostingPrivatedatabaseUserOutput
	ToHostingPrivatedatabaseUserOutputWithContext(ctx context.Context) HostingPrivatedatabaseUserOutput
}

func (*HostingPrivatedatabaseUser) ElementType() reflect.Type {
	return reflect.TypeOf((**HostingPrivatedatabaseUser)(nil)).Elem()
}

func (i *HostingPrivatedatabaseUser) ToHostingPrivatedatabaseUserOutput() HostingPrivatedatabaseUserOutput {
	return i.ToHostingPrivatedatabaseUserOutputWithContext(context.Background())
}

func (i *HostingPrivatedatabaseUser) ToHostingPrivatedatabaseUserOutputWithContext(ctx context.Context) HostingPrivatedatabaseUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostingPrivatedatabaseUserOutput)
}

type HostingPrivatedatabaseUserOutput struct{ *pulumi.OutputState }

func (HostingPrivatedatabaseUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HostingPrivatedatabaseUser)(nil)).Elem()
}

func (o HostingPrivatedatabaseUserOutput) ToHostingPrivatedatabaseUserOutput() HostingPrivatedatabaseUserOutput {
	return o
}

func (o HostingPrivatedatabaseUserOutput) ToHostingPrivatedatabaseUserOutputWithContext(ctx context.Context) HostingPrivatedatabaseUserOutput {
	return o
}

// Password for the new user ( alphanumeric and 8 characters minimum )
func (o HostingPrivatedatabaseUserOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v *HostingPrivatedatabaseUser) pulumi.StringOutput { return v.Password }).(pulumi.StringOutput)
}

// The internal name of your private database
func (o HostingPrivatedatabaseUserOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v *HostingPrivatedatabaseUser) pulumi.StringOutput { return v.ServiceName }).(pulumi.StringOutput)
}

// User name used to connect on your databases
func (o HostingPrivatedatabaseUserOutput) UserName() pulumi.StringOutput {
	return o.ApplyT(func(v *HostingPrivatedatabaseUser) pulumi.StringOutput { return v.UserName }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HostingPrivatedatabaseUserInput)(nil)).Elem(), &HostingPrivatedatabaseUser{})
	pulumi.RegisterOutputType(HostingPrivatedatabaseUserOutput{})
}
