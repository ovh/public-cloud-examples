// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ovh

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/ovh/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DedicatedServerUpdate struct {
	pulumi.CustomResourceState

	// The boot id of your dedicated server.
	BootId pulumi.Float64Output `pulumi:"bootId"`
	// The boot script of your dedicated server.
	BootScript pulumi.StringPtrOutput `pulumi:"bootScript"`
	// Display name of the dedicated server
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// Icmp monitoring state
	Monitoring pulumi.BoolOutput `pulumi:"monitoring"`
	// The internal name of your dedicated server.
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
	// error, hacked, hackedBlocked, ok
	State pulumi.StringOutput `pulumi:"state"`
}

// NewDedicatedServerUpdate registers a new resource with the given unique name, arguments, and options.
func NewDedicatedServerUpdate(ctx *pulumi.Context,
	name string, args *DedicatedServerUpdateArgs, opts ...pulumi.ResourceOption) (*DedicatedServerUpdate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource DedicatedServerUpdate
	err = ctx.RegisterPackageResource("ovh:index/dedicatedServerUpdate:DedicatedServerUpdate", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDedicatedServerUpdate gets an existing DedicatedServerUpdate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDedicatedServerUpdate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DedicatedServerUpdateState, opts ...pulumi.ResourceOption) (*DedicatedServerUpdate, error) {
	var resource DedicatedServerUpdate
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("ovh:index/dedicatedServerUpdate:DedicatedServerUpdate", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DedicatedServerUpdate resources.
type dedicatedServerUpdateState struct {
	// The boot id of your dedicated server.
	BootId *float64 `pulumi:"bootId"`
	// The boot script of your dedicated server.
	BootScript *string `pulumi:"bootScript"`
	// Display name of the dedicated server
	DisplayName *string `pulumi:"displayName"`
	// Icmp monitoring state
	Monitoring *bool `pulumi:"monitoring"`
	// The internal name of your dedicated server.
	ServiceName *string `pulumi:"serviceName"`
	// error, hacked, hackedBlocked, ok
	State *string `pulumi:"state"`
}

type DedicatedServerUpdateState struct {
	// The boot id of your dedicated server.
	BootId pulumi.Float64PtrInput
	// The boot script of your dedicated server.
	BootScript pulumi.StringPtrInput
	// Display name of the dedicated server
	DisplayName pulumi.StringPtrInput
	// Icmp monitoring state
	Monitoring pulumi.BoolPtrInput
	// The internal name of your dedicated server.
	ServiceName pulumi.StringPtrInput
	// error, hacked, hackedBlocked, ok
	State pulumi.StringPtrInput
}

func (DedicatedServerUpdateState) ElementType() reflect.Type {
	return reflect.TypeOf((*dedicatedServerUpdateState)(nil)).Elem()
}

type dedicatedServerUpdateArgs struct {
	// The boot id of your dedicated server.
	BootId *float64 `pulumi:"bootId"`
	// The boot script of your dedicated server.
	BootScript *string `pulumi:"bootScript"`
	// Display name of the dedicated server
	DisplayName *string `pulumi:"displayName"`
	// Icmp monitoring state
	Monitoring *bool `pulumi:"monitoring"`
	// The internal name of your dedicated server.
	ServiceName string `pulumi:"serviceName"`
	// error, hacked, hackedBlocked, ok
	State *string `pulumi:"state"`
}

// The set of arguments for constructing a DedicatedServerUpdate resource.
type DedicatedServerUpdateArgs struct {
	// The boot id of your dedicated server.
	BootId pulumi.Float64PtrInput
	// The boot script of your dedicated server.
	BootScript pulumi.StringPtrInput
	// Display name of the dedicated server
	DisplayName pulumi.StringPtrInput
	// Icmp monitoring state
	Monitoring pulumi.BoolPtrInput
	// The internal name of your dedicated server.
	ServiceName pulumi.StringInput
	// error, hacked, hackedBlocked, ok
	State pulumi.StringPtrInput
}

func (DedicatedServerUpdateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dedicatedServerUpdateArgs)(nil)).Elem()
}

type DedicatedServerUpdateInput interface {
	pulumi.Input

	ToDedicatedServerUpdateOutput() DedicatedServerUpdateOutput
	ToDedicatedServerUpdateOutputWithContext(ctx context.Context) DedicatedServerUpdateOutput
}

func (*DedicatedServerUpdate) ElementType() reflect.Type {
	return reflect.TypeOf((**DedicatedServerUpdate)(nil)).Elem()
}

func (i *DedicatedServerUpdate) ToDedicatedServerUpdateOutput() DedicatedServerUpdateOutput {
	return i.ToDedicatedServerUpdateOutputWithContext(context.Background())
}

func (i *DedicatedServerUpdate) ToDedicatedServerUpdateOutputWithContext(ctx context.Context) DedicatedServerUpdateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DedicatedServerUpdateOutput)
}

type DedicatedServerUpdateOutput struct{ *pulumi.OutputState }

func (DedicatedServerUpdateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DedicatedServerUpdate)(nil)).Elem()
}

func (o DedicatedServerUpdateOutput) ToDedicatedServerUpdateOutput() DedicatedServerUpdateOutput {
	return o
}

func (o DedicatedServerUpdateOutput) ToDedicatedServerUpdateOutputWithContext(ctx context.Context) DedicatedServerUpdateOutput {
	return o
}

// The boot id of your dedicated server.
func (o DedicatedServerUpdateOutput) BootId() pulumi.Float64Output {
	return o.ApplyT(func(v *DedicatedServerUpdate) pulumi.Float64Output { return v.BootId }).(pulumi.Float64Output)
}

// The boot script of your dedicated server.
func (o DedicatedServerUpdateOutput) BootScript() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DedicatedServerUpdate) pulumi.StringPtrOutput { return v.BootScript }).(pulumi.StringPtrOutput)
}

// Display name of the dedicated server
func (o DedicatedServerUpdateOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *DedicatedServerUpdate) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// Icmp monitoring state
func (o DedicatedServerUpdateOutput) Monitoring() pulumi.BoolOutput {
	return o.ApplyT(func(v *DedicatedServerUpdate) pulumi.BoolOutput { return v.Monitoring }).(pulumi.BoolOutput)
}

// The internal name of your dedicated server.
func (o DedicatedServerUpdateOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v *DedicatedServerUpdate) pulumi.StringOutput { return v.ServiceName }).(pulumi.StringOutput)
}

// error, hacked, hackedBlocked, ok
func (o DedicatedServerUpdateOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *DedicatedServerUpdate) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DedicatedServerUpdateInput)(nil)).Elem(), &DedicatedServerUpdate{})
	pulumi.RegisterOutputType(DedicatedServerUpdateOutput{})
}
