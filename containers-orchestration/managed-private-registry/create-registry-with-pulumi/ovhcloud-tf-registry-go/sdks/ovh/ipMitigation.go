// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ovh

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/ovh/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type IpMitigation struct {
	pulumi.CustomResourceState

	// Set on true if your ip is on auto-mitigation
	Auto pulumi.BoolOutput `pulumi:"auto"`
	// IP (v4 or v6) CIDR notation (e.g., 192.0.2.0/24)
	Ip pulumi.StringOutput `pulumi:"ip"`
	// IPv4 address (e.g., 192.0.2.0)
	IpOnMitigation pulumi.StringOutput `pulumi:"ipOnMitigation"`
	// Set on true if your ip is on permanent mitigation
	Permanent pulumi.BoolOutput `pulumi:"permanent"`
	// Current state of your ip on mitigation
	State pulumi.StringOutput `pulumi:"state"`
}

// NewIpMitigation registers a new resource with the given unique name, arguments, and options.
func NewIpMitigation(ctx *pulumi.Context,
	name string, args *IpMitigationArgs, opts ...pulumi.ResourceOption) (*IpMitigation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Ip == nil {
		return nil, errors.New("invalid value for required argument 'Ip'")
	}
	if args.IpOnMitigation == nil {
		return nil, errors.New("invalid value for required argument 'IpOnMitigation'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource IpMitigation
	err = ctx.RegisterPackageResource("ovh:index/ipMitigation:IpMitigation", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIpMitigation gets an existing IpMitigation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIpMitigation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IpMitigationState, opts ...pulumi.ResourceOption) (*IpMitigation, error) {
	var resource IpMitigation
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("ovh:index/ipMitigation:IpMitigation", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IpMitigation resources.
type ipMitigationState struct {
	// Set on true if your ip is on auto-mitigation
	Auto *bool `pulumi:"auto"`
	// IP (v4 or v6) CIDR notation (e.g., 192.0.2.0/24)
	Ip *string `pulumi:"ip"`
	// IPv4 address (e.g., 192.0.2.0)
	IpOnMitigation *string `pulumi:"ipOnMitigation"`
	// Set on true if your ip is on permanent mitigation
	Permanent *bool `pulumi:"permanent"`
	// Current state of your ip on mitigation
	State *string `pulumi:"state"`
}

type IpMitigationState struct {
	// Set on true if your ip is on auto-mitigation
	Auto pulumi.BoolPtrInput
	// IP (v4 or v6) CIDR notation (e.g., 192.0.2.0/24)
	Ip pulumi.StringPtrInput
	// IPv4 address (e.g., 192.0.2.0)
	IpOnMitigation pulumi.StringPtrInput
	// Set on true if your ip is on permanent mitigation
	Permanent pulumi.BoolPtrInput
	// Current state of your ip on mitigation
	State pulumi.StringPtrInput
}

func (IpMitigationState) ElementType() reflect.Type {
	return reflect.TypeOf((*ipMitigationState)(nil)).Elem()
}

type ipMitigationArgs struct {
	// IP (v4 or v6) CIDR notation (e.g., 192.0.2.0/24)
	Ip string `pulumi:"ip"`
	// IPv4 address (e.g., 192.0.2.0)
	IpOnMitigation string `pulumi:"ipOnMitigation"`
	// Set on true if your ip is on permanent mitigation
	Permanent *bool `pulumi:"permanent"`
}

// The set of arguments for constructing a IpMitigation resource.
type IpMitigationArgs struct {
	// IP (v4 or v6) CIDR notation (e.g., 192.0.2.0/24)
	Ip pulumi.StringInput
	// IPv4 address (e.g., 192.0.2.0)
	IpOnMitigation pulumi.StringInput
	// Set on true if your ip is on permanent mitigation
	Permanent pulumi.BoolPtrInput
}

func (IpMitigationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ipMitigationArgs)(nil)).Elem()
}

type IpMitigationInput interface {
	pulumi.Input

	ToIpMitigationOutput() IpMitigationOutput
	ToIpMitigationOutputWithContext(ctx context.Context) IpMitigationOutput
}

func (*IpMitigation) ElementType() reflect.Type {
	return reflect.TypeOf((**IpMitigation)(nil)).Elem()
}

func (i *IpMitigation) ToIpMitigationOutput() IpMitigationOutput {
	return i.ToIpMitigationOutputWithContext(context.Background())
}

func (i *IpMitigation) ToIpMitigationOutputWithContext(ctx context.Context) IpMitigationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpMitigationOutput)
}

type IpMitigationOutput struct{ *pulumi.OutputState }

func (IpMitigationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IpMitigation)(nil)).Elem()
}

func (o IpMitigationOutput) ToIpMitigationOutput() IpMitigationOutput {
	return o
}

func (o IpMitigationOutput) ToIpMitigationOutputWithContext(ctx context.Context) IpMitigationOutput {
	return o
}

// Set on true if your ip is on auto-mitigation
func (o IpMitigationOutput) Auto() pulumi.BoolOutput {
	return o.ApplyT(func(v *IpMitigation) pulumi.BoolOutput { return v.Auto }).(pulumi.BoolOutput)
}

// IP (v4 or v6) CIDR notation (e.g., 192.0.2.0/24)
func (o IpMitigationOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v *IpMitigation) pulumi.StringOutput { return v.Ip }).(pulumi.StringOutput)
}

// IPv4 address (e.g., 192.0.2.0)
func (o IpMitigationOutput) IpOnMitigation() pulumi.StringOutput {
	return o.ApplyT(func(v *IpMitigation) pulumi.StringOutput { return v.IpOnMitigation }).(pulumi.StringOutput)
}

// Set on true if your ip is on permanent mitigation
func (o IpMitigationOutput) Permanent() pulumi.BoolOutput {
	return o.ApplyT(func(v *IpMitigation) pulumi.BoolOutput { return v.Permanent }).(pulumi.BoolOutput)
}

// Current state of your ip on mitigation
func (o IpMitigationOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *IpMitigation) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IpMitigationInput)(nil)).Elem(), &IpMitigation{})
	pulumi.RegisterOutputType(IpMitigationOutput{})
}
