// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ovh

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/ovh/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type CloudProjectDatabaseKafkaAcl struct {
	pulumi.CustomResourceState

	// Id of the database cluster
	ClusterId pulumi.StringOutput `pulumi:"clusterId"`
	// Permission to give to this username on this topic
	Permission  pulumi.StringOutput                           `pulumi:"permission"`
	ServiceName pulumi.StringPtrOutput                        `pulumi:"serviceName"`
	Timeouts    CloudProjectDatabaseKafkaAclTimeoutsPtrOutput `pulumi:"timeouts"`
	// Topic affected by this acl
	Topic pulumi.StringOutput `pulumi:"topic"`
	// Username affected by this acl
	Username pulumi.StringOutput `pulumi:"username"`
}

// NewCloudProjectDatabaseKafkaAcl registers a new resource with the given unique name, arguments, and options.
func NewCloudProjectDatabaseKafkaAcl(ctx *pulumi.Context,
	name string, args *CloudProjectDatabaseKafkaAclArgs, opts ...pulumi.ResourceOption) (*CloudProjectDatabaseKafkaAcl, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterId == nil {
		return nil, errors.New("invalid value for required argument 'ClusterId'")
	}
	if args.Permission == nil {
		return nil, errors.New("invalid value for required argument 'Permission'")
	}
	if args.Topic == nil {
		return nil, errors.New("invalid value for required argument 'Topic'")
	}
	if args.Username == nil {
		return nil, errors.New("invalid value for required argument 'Username'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource CloudProjectDatabaseKafkaAcl
	err = ctx.RegisterPackageResource("ovh:index/cloudProjectDatabaseKafkaAcl:CloudProjectDatabaseKafkaAcl", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCloudProjectDatabaseKafkaAcl gets an existing CloudProjectDatabaseKafkaAcl resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCloudProjectDatabaseKafkaAcl(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CloudProjectDatabaseKafkaAclState, opts ...pulumi.ResourceOption) (*CloudProjectDatabaseKafkaAcl, error) {
	var resource CloudProjectDatabaseKafkaAcl
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("ovh:index/cloudProjectDatabaseKafkaAcl:CloudProjectDatabaseKafkaAcl", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CloudProjectDatabaseKafkaAcl resources.
type cloudProjectDatabaseKafkaAclState struct {
	// Id of the database cluster
	ClusterId *string `pulumi:"clusterId"`
	// Permission to give to this username on this topic
	Permission  *string                               `pulumi:"permission"`
	ServiceName *string                               `pulumi:"serviceName"`
	Timeouts    *CloudProjectDatabaseKafkaAclTimeouts `pulumi:"timeouts"`
	// Topic affected by this acl
	Topic *string `pulumi:"topic"`
	// Username affected by this acl
	Username *string `pulumi:"username"`
}

type CloudProjectDatabaseKafkaAclState struct {
	// Id of the database cluster
	ClusterId pulumi.StringPtrInput
	// Permission to give to this username on this topic
	Permission  pulumi.StringPtrInput
	ServiceName pulumi.StringPtrInput
	Timeouts    CloudProjectDatabaseKafkaAclTimeoutsPtrInput
	// Topic affected by this acl
	Topic pulumi.StringPtrInput
	// Username affected by this acl
	Username pulumi.StringPtrInput
}

func (CloudProjectDatabaseKafkaAclState) ElementType() reflect.Type {
	return reflect.TypeOf((*cloudProjectDatabaseKafkaAclState)(nil)).Elem()
}

type cloudProjectDatabaseKafkaAclArgs struct {
	// Id of the database cluster
	ClusterId string `pulumi:"clusterId"`
	// Permission to give to this username on this topic
	Permission  string                                `pulumi:"permission"`
	ServiceName *string                               `pulumi:"serviceName"`
	Timeouts    *CloudProjectDatabaseKafkaAclTimeouts `pulumi:"timeouts"`
	// Topic affected by this acl
	Topic string `pulumi:"topic"`
	// Username affected by this acl
	Username string `pulumi:"username"`
}

// The set of arguments for constructing a CloudProjectDatabaseKafkaAcl resource.
type CloudProjectDatabaseKafkaAclArgs struct {
	// Id of the database cluster
	ClusterId pulumi.StringInput
	// Permission to give to this username on this topic
	Permission  pulumi.StringInput
	ServiceName pulumi.StringPtrInput
	Timeouts    CloudProjectDatabaseKafkaAclTimeoutsPtrInput
	// Topic affected by this acl
	Topic pulumi.StringInput
	// Username affected by this acl
	Username pulumi.StringInput
}

func (CloudProjectDatabaseKafkaAclArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cloudProjectDatabaseKafkaAclArgs)(nil)).Elem()
}

type CloudProjectDatabaseKafkaAclInput interface {
	pulumi.Input

	ToCloudProjectDatabaseKafkaAclOutput() CloudProjectDatabaseKafkaAclOutput
	ToCloudProjectDatabaseKafkaAclOutputWithContext(ctx context.Context) CloudProjectDatabaseKafkaAclOutput
}

func (*CloudProjectDatabaseKafkaAcl) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudProjectDatabaseKafkaAcl)(nil)).Elem()
}

func (i *CloudProjectDatabaseKafkaAcl) ToCloudProjectDatabaseKafkaAclOutput() CloudProjectDatabaseKafkaAclOutput {
	return i.ToCloudProjectDatabaseKafkaAclOutputWithContext(context.Background())
}

func (i *CloudProjectDatabaseKafkaAcl) ToCloudProjectDatabaseKafkaAclOutputWithContext(ctx context.Context) CloudProjectDatabaseKafkaAclOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudProjectDatabaseKafkaAclOutput)
}

type CloudProjectDatabaseKafkaAclOutput struct{ *pulumi.OutputState }

func (CloudProjectDatabaseKafkaAclOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudProjectDatabaseKafkaAcl)(nil)).Elem()
}

func (o CloudProjectDatabaseKafkaAclOutput) ToCloudProjectDatabaseKafkaAclOutput() CloudProjectDatabaseKafkaAclOutput {
	return o
}

func (o CloudProjectDatabaseKafkaAclOutput) ToCloudProjectDatabaseKafkaAclOutputWithContext(ctx context.Context) CloudProjectDatabaseKafkaAclOutput {
	return o
}

// Id of the database cluster
func (o CloudProjectDatabaseKafkaAclOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudProjectDatabaseKafkaAcl) pulumi.StringOutput { return v.ClusterId }).(pulumi.StringOutput)
}

// Permission to give to this username on this topic
func (o CloudProjectDatabaseKafkaAclOutput) Permission() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudProjectDatabaseKafkaAcl) pulumi.StringOutput { return v.Permission }).(pulumi.StringOutput)
}

func (o CloudProjectDatabaseKafkaAclOutput) ServiceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CloudProjectDatabaseKafkaAcl) pulumi.StringPtrOutput { return v.ServiceName }).(pulumi.StringPtrOutput)
}

func (o CloudProjectDatabaseKafkaAclOutput) Timeouts() CloudProjectDatabaseKafkaAclTimeoutsPtrOutput {
	return o.ApplyT(func(v *CloudProjectDatabaseKafkaAcl) CloudProjectDatabaseKafkaAclTimeoutsPtrOutput { return v.Timeouts }).(CloudProjectDatabaseKafkaAclTimeoutsPtrOutput)
}

// Topic affected by this acl
func (o CloudProjectDatabaseKafkaAclOutput) Topic() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudProjectDatabaseKafkaAcl) pulumi.StringOutput { return v.Topic }).(pulumi.StringOutput)
}

// Username affected by this acl
func (o CloudProjectDatabaseKafkaAclOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudProjectDatabaseKafkaAcl) pulumi.StringOutput { return v.Username }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CloudProjectDatabaseKafkaAclInput)(nil)).Elem(), &CloudProjectDatabaseKafkaAcl{})
	pulumi.RegisterOutputType(CloudProjectDatabaseKafkaAclOutput{})
}
