// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ovh

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/ovh/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type IploadbalancingHttpRoute struct {
	pulumi.CustomResourceState

	// Action triggered when all rules match
	Action IploadbalancingHttpRouteActionOutput `pulumi:"action"`
	// Human readable name for your route, this field is for you
	DisplayName pulumi.StringPtrOutput `pulumi:"displayName"`
	// Route traffic for this frontend
	FrontendId pulumi.Float64Output `pulumi:"frontendId"`
	// List of rules to match to trigger action
	Rules IploadbalancingHttpRouteRuleTypeArrayOutput `pulumi:"rules"`
	// The internal name of your IP load balancing
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
	// Route status. Routes in "ok" state are ready to operate
	Status pulumi.StringOutput `pulumi:"status"`
	// Route priority ([0..255]). 0 if null. Highest priority routes are evaluated last. Only the first matching route will
	// trigger an action
	Weight pulumi.Float64Output `pulumi:"weight"`
}

// NewIploadbalancingHttpRoute registers a new resource with the given unique name, arguments, and options.
func NewIploadbalancingHttpRoute(ctx *pulumi.Context,
	name string, args *IploadbalancingHttpRouteArgs, opts ...pulumi.ResourceOption) (*IploadbalancingHttpRoute, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Action == nil {
		return nil, errors.New("invalid value for required argument 'Action'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource IploadbalancingHttpRoute
	err = ctx.RegisterPackageResource("ovh:index/iploadbalancingHttpRoute:IploadbalancingHttpRoute", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIploadbalancingHttpRoute gets an existing IploadbalancingHttpRoute resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIploadbalancingHttpRoute(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IploadbalancingHttpRouteState, opts ...pulumi.ResourceOption) (*IploadbalancingHttpRoute, error) {
	var resource IploadbalancingHttpRoute
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("ovh:index/iploadbalancingHttpRoute:IploadbalancingHttpRoute", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IploadbalancingHttpRoute resources.
type iploadbalancingHttpRouteState struct {
	// Action triggered when all rules match
	Action *IploadbalancingHttpRouteAction `pulumi:"action"`
	// Human readable name for your route, this field is for you
	DisplayName *string `pulumi:"displayName"`
	// Route traffic for this frontend
	FrontendId *float64 `pulumi:"frontendId"`
	// List of rules to match to trigger action
	Rules []IploadbalancingHttpRouteRuleType `pulumi:"rules"`
	// The internal name of your IP load balancing
	ServiceName *string `pulumi:"serviceName"`
	// Route status. Routes in "ok" state are ready to operate
	Status *string `pulumi:"status"`
	// Route priority ([0..255]). 0 if null. Highest priority routes are evaluated last. Only the first matching route will
	// trigger an action
	Weight *float64 `pulumi:"weight"`
}

type IploadbalancingHttpRouteState struct {
	// Action triggered when all rules match
	Action IploadbalancingHttpRouteActionPtrInput
	// Human readable name for your route, this field is for you
	DisplayName pulumi.StringPtrInput
	// Route traffic for this frontend
	FrontendId pulumi.Float64PtrInput
	// List of rules to match to trigger action
	Rules IploadbalancingHttpRouteRuleTypeArrayInput
	// The internal name of your IP load balancing
	ServiceName pulumi.StringPtrInput
	// Route status. Routes in "ok" state are ready to operate
	Status pulumi.StringPtrInput
	// Route priority ([0..255]). 0 if null. Highest priority routes are evaluated last. Only the first matching route will
	// trigger an action
	Weight pulumi.Float64PtrInput
}

func (IploadbalancingHttpRouteState) ElementType() reflect.Type {
	return reflect.TypeOf((*iploadbalancingHttpRouteState)(nil)).Elem()
}

type iploadbalancingHttpRouteArgs struct {
	// Action triggered when all rules match
	Action IploadbalancingHttpRouteAction `pulumi:"action"`
	// Human readable name for your route, this field is for you
	DisplayName *string `pulumi:"displayName"`
	// Route traffic for this frontend
	FrontendId *float64 `pulumi:"frontendId"`
	// The internal name of your IP load balancing
	ServiceName string `pulumi:"serviceName"`
	// Route priority ([0..255]). 0 if null. Highest priority routes are evaluated last. Only the first matching route will
	// trigger an action
	Weight *float64 `pulumi:"weight"`
}

// The set of arguments for constructing a IploadbalancingHttpRoute resource.
type IploadbalancingHttpRouteArgs struct {
	// Action triggered when all rules match
	Action IploadbalancingHttpRouteActionInput
	// Human readable name for your route, this field is for you
	DisplayName pulumi.StringPtrInput
	// Route traffic for this frontend
	FrontendId pulumi.Float64PtrInput
	// The internal name of your IP load balancing
	ServiceName pulumi.StringInput
	// Route priority ([0..255]). 0 if null. Highest priority routes are evaluated last. Only the first matching route will
	// trigger an action
	Weight pulumi.Float64PtrInput
}

func (IploadbalancingHttpRouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*iploadbalancingHttpRouteArgs)(nil)).Elem()
}

type IploadbalancingHttpRouteInput interface {
	pulumi.Input

	ToIploadbalancingHttpRouteOutput() IploadbalancingHttpRouteOutput
	ToIploadbalancingHttpRouteOutputWithContext(ctx context.Context) IploadbalancingHttpRouteOutput
}

func (*IploadbalancingHttpRoute) ElementType() reflect.Type {
	return reflect.TypeOf((**IploadbalancingHttpRoute)(nil)).Elem()
}

func (i *IploadbalancingHttpRoute) ToIploadbalancingHttpRouteOutput() IploadbalancingHttpRouteOutput {
	return i.ToIploadbalancingHttpRouteOutputWithContext(context.Background())
}

func (i *IploadbalancingHttpRoute) ToIploadbalancingHttpRouteOutputWithContext(ctx context.Context) IploadbalancingHttpRouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IploadbalancingHttpRouteOutput)
}

type IploadbalancingHttpRouteOutput struct{ *pulumi.OutputState }

func (IploadbalancingHttpRouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IploadbalancingHttpRoute)(nil)).Elem()
}

func (o IploadbalancingHttpRouteOutput) ToIploadbalancingHttpRouteOutput() IploadbalancingHttpRouteOutput {
	return o
}

func (o IploadbalancingHttpRouteOutput) ToIploadbalancingHttpRouteOutputWithContext(ctx context.Context) IploadbalancingHttpRouteOutput {
	return o
}

// Action triggered when all rules match
func (o IploadbalancingHttpRouteOutput) Action() IploadbalancingHttpRouteActionOutput {
	return o.ApplyT(func(v *IploadbalancingHttpRoute) IploadbalancingHttpRouteActionOutput { return v.Action }).(IploadbalancingHttpRouteActionOutput)
}

// Human readable name for your route, this field is for you
func (o IploadbalancingHttpRouteOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IploadbalancingHttpRoute) pulumi.StringPtrOutput { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Route traffic for this frontend
func (o IploadbalancingHttpRouteOutput) FrontendId() pulumi.Float64Output {
	return o.ApplyT(func(v *IploadbalancingHttpRoute) pulumi.Float64Output { return v.FrontendId }).(pulumi.Float64Output)
}

// List of rules to match to trigger action
func (o IploadbalancingHttpRouteOutput) Rules() IploadbalancingHttpRouteRuleTypeArrayOutput {
	return o.ApplyT(func(v *IploadbalancingHttpRoute) IploadbalancingHttpRouteRuleTypeArrayOutput { return v.Rules }).(IploadbalancingHttpRouteRuleTypeArrayOutput)
}

// The internal name of your IP load balancing
func (o IploadbalancingHttpRouteOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v *IploadbalancingHttpRoute) pulumi.StringOutput { return v.ServiceName }).(pulumi.StringOutput)
}

// Route status. Routes in "ok" state are ready to operate
func (o IploadbalancingHttpRouteOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *IploadbalancingHttpRoute) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Route priority ([0..255]). 0 if null. Highest priority routes are evaluated last. Only the first matching route will
// trigger an action
func (o IploadbalancingHttpRouteOutput) Weight() pulumi.Float64Output {
	return o.ApplyT(func(v *IploadbalancingHttpRoute) pulumi.Float64Output { return v.Weight }).(pulumi.Float64Output)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IploadbalancingHttpRouteInput)(nil)).Elem(), &IploadbalancingHttpRoute{})
	pulumi.RegisterOutputType(IploadbalancingHttpRouteOutput{})
}
