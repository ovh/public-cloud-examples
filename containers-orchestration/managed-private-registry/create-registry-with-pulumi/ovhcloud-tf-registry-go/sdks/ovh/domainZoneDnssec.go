// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ovh

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/ovh/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DomainZoneDnssec struct {
	pulumi.CustomResourceState

	// DNSSEC Status
	Status pulumi.StringOutput `pulumi:"status"`
	// The internal name of your zone
	ZoneName pulumi.StringOutput `pulumi:"zoneName"`
}

// NewDomainZoneDnssec registers a new resource with the given unique name, arguments, and options.
func NewDomainZoneDnssec(ctx *pulumi.Context,
	name string, args *DomainZoneDnssecArgs, opts ...pulumi.ResourceOption) (*DomainZoneDnssec, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ZoneName == nil {
		return nil, errors.New("invalid value for required argument 'ZoneName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource DomainZoneDnssec
	err = ctx.RegisterPackageResource("ovh:index/domainZoneDnssec:DomainZoneDnssec", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDomainZoneDnssec gets an existing DomainZoneDnssec resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDomainZoneDnssec(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DomainZoneDnssecState, opts ...pulumi.ResourceOption) (*DomainZoneDnssec, error) {
	var resource DomainZoneDnssec
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("ovh:index/domainZoneDnssec:DomainZoneDnssec", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DomainZoneDnssec resources.
type domainZoneDnssecState struct {
	// DNSSEC Status
	Status *string `pulumi:"status"`
	// The internal name of your zone
	ZoneName *string `pulumi:"zoneName"`
}

type DomainZoneDnssecState struct {
	// DNSSEC Status
	Status pulumi.StringPtrInput
	// The internal name of your zone
	ZoneName pulumi.StringPtrInput
}

func (DomainZoneDnssecState) ElementType() reflect.Type {
	return reflect.TypeOf((*domainZoneDnssecState)(nil)).Elem()
}

type domainZoneDnssecArgs struct {
	// The internal name of your zone
	ZoneName string `pulumi:"zoneName"`
}

// The set of arguments for constructing a DomainZoneDnssec resource.
type DomainZoneDnssecArgs struct {
	// The internal name of your zone
	ZoneName pulumi.StringInput
}

func (DomainZoneDnssecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*domainZoneDnssecArgs)(nil)).Elem()
}

type DomainZoneDnssecInput interface {
	pulumi.Input

	ToDomainZoneDnssecOutput() DomainZoneDnssecOutput
	ToDomainZoneDnssecOutputWithContext(ctx context.Context) DomainZoneDnssecOutput
}

func (*DomainZoneDnssec) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainZoneDnssec)(nil)).Elem()
}

func (i *DomainZoneDnssec) ToDomainZoneDnssecOutput() DomainZoneDnssecOutput {
	return i.ToDomainZoneDnssecOutputWithContext(context.Background())
}

func (i *DomainZoneDnssec) ToDomainZoneDnssecOutputWithContext(ctx context.Context) DomainZoneDnssecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainZoneDnssecOutput)
}

type DomainZoneDnssecOutput struct{ *pulumi.OutputState }

func (DomainZoneDnssecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainZoneDnssec)(nil)).Elem()
}

func (o DomainZoneDnssecOutput) ToDomainZoneDnssecOutput() DomainZoneDnssecOutput {
	return o
}

func (o DomainZoneDnssecOutput) ToDomainZoneDnssecOutputWithContext(ctx context.Context) DomainZoneDnssecOutput {
	return o
}

// DNSSEC Status
func (o DomainZoneDnssecOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *DomainZoneDnssec) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// The internal name of your zone
func (o DomainZoneDnssecOutput) ZoneName() pulumi.StringOutput {
	return o.ApplyT(func(v *DomainZoneDnssec) pulumi.StringOutput { return v.ZoneName }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DomainZoneDnssecInput)(nil)).Elem(), &DomainZoneDnssec{})
	pulumi.RegisterOutputType(DomainZoneDnssecOutput{})
}
