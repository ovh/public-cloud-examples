// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ovh

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/ovh/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type MeInstallationTemplatePartitionScheme struct {
	pulumi.CustomResourceState

	// name of this partitioning scheme
	Name pulumi.StringOutput `pulumi:"name"`
	// on a reinstall, if a partitioning scheme is not specified, the one with the higher priority will be used by default,
	// among all the compatible partitioning schemes (given the underlying hardware specifications)
	Priority pulumi.Float64Output `pulumi:"priority"`
	// This template name
	TemplateName pulumi.StringOutput `pulumi:"templateName"`
}

// NewMeInstallationTemplatePartitionScheme registers a new resource with the given unique name, arguments, and options.
func NewMeInstallationTemplatePartitionScheme(ctx *pulumi.Context,
	name string, args *MeInstallationTemplatePartitionSchemeArgs, opts ...pulumi.ResourceOption) (*MeInstallationTemplatePartitionScheme, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Priority == nil {
		return nil, errors.New("invalid value for required argument 'Priority'")
	}
	if args.TemplateName == nil {
		return nil, errors.New("invalid value for required argument 'TemplateName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource MeInstallationTemplatePartitionScheme
	err = ctx.RegisterPackageResource("ovh:index/meInstallationTemplatePartitionScheme:MeInstallationTemplatePartitionScheme", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMeInstallationTemplatePartitionScheme gets an existing MeInstallationTemplatePartitionScheme resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMeInstallationTemplatePartitionScheme(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MeInstallationTemplatePartitionSchemeState, opts ...pulumi.ResourceOption) (*MeInstallationTemplatePartitionScheme, error) {
	var resource MeInstallationTemplatePartitionScheme
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("ovh:index/meInstallationTemplatePartitionScheme:MeInstallationTemplatePartitionScheme", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MeInstallationTemplatePartitionScheme resources.
type meInstallationTemplatePartitionSchemeState struct {
	// name of this partitioning scheme
	Name *string `pulumi:"name"`
	// on a reinstall, if a partitioning scheme is not specified, the one with the higher priority will be used by default,
	// among all the compatible partitioning schemes (given the underlying hardware specifications)
	Priority *float64 `pulumi:"priority"`
	// This template name
	TemplateName *string `pulumi:"templateName"`
}

type MeInstallationTemplatePartitionSchemeState struct {
	// name of this partitioning scheme
	Name pulumi.StringPtrInput
	// on a reinstall, if a partitioning scheme is not specified, the one with the higher priority will be used by default,
	// among all the compatible partitioning schemes (given the underlying hardware specifications)
	Priority pulumi.Float64PtrInput
	// This template name
	TemplateName pulumi.StringPtrInput
}

func (MeInstallationTemplatePartitionSchemeState) ElementType() reflect.Type {
	return reflect.TypeOf((*meInstallationTemplatePartitionSchemeState)(nil)).Elem()
}

type meInstallationTemplatePartitionSchemeArgs struct {
	// name of this partitioning scheme
	Name *string `pulumi:"name"`
	// on a reinstall, if a partitioning scheme is not specified, the one with the higher priority will be used by default,
	// among all the compatible partitioning schemes (given the underlying hardware specifications)
	Priority float64 `pulumi:"priority"`
	// This template name
	TemplateName string `pulumi:"templateName"`
}

// The set of arguments for constructing a MeInstallationTemplatePartitionScheme resource.
type MeInstallationTemplatePartitionSchemeArgs struct {
	// name of this partitioning scheme
	Name pulumi.StringPtrInput
	// on a reinstall, if a partitioning scheme is not specified, the one with the higher priority will be used by default,
	// among all the compatible partitioning schemes (given the underlying hardware specifications)
	Priority pulumi.Float64Input
	// This template name
	TemplateName pulumi.StringInput
}

func (MeInstallationTemplatePartitionSchemeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*meInstallationTemplatePartitionSchemeArgs)(nil)).Elem()
}

type MeInstallationTemplatePartitionSchemeInput interface {
	pulumi.Input

	ToMeInstallationTemplatePartitionSchemeOutput() MeInstallationTemplatePartitionSchemeOutput
	ToMeInstallationTemplatePartitionSchemeOutputWithContext(ctx context.Context) MeInstallationTemplatePartitionSchemeOutput
}

func (*MeInstallationTemplatePartitionScheme) ElementType() reflect.Type {
	return reflect.TypeOf((**MeInstallationTemplatePartitionScheme)(nil)).Elem()
}

func (i *MeInstallationTemplatePartitionScheme) ToMeInstallationTemplatePartitionSchemeOutput() MeInstallationTemplatePartitionSchemeOutput {
	return i.ToMeInstallationTemplatePartitionSchemeOutputWithContext(context.Background())
}

func (i *MeInstallationTemplatePartitionScheme) ToMeInstallationTemplatePartitionSchemeOutputWithContext(ctx context.Context) MeInstallationTemplatePartitionSchemeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MeInstallationTemplatePartitionSchemeOutput)
}

type MeInstallationTemplatePartitionSchemeOutput struct{ *pulumi.OutputState }

func (MeInstallationTemplatePartitionSchemeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MeInstallationTemplatePartitionScheme)(nil)).Elem()
}

func (o MeInstallationTemplatePartitionSchemeOutput) ToMeInstallationTemplatePartitionSchemeOutput() MeInstallationTemplatePartitionSchemeOutput {
	return o
}

func (o MeInstallationTemplatePartitionSchemeOutput) ToMeInstallationTemplatePartitionSchemeOutputWithContext(ctx context.Context) MeInstallationTemplatePartitionSchemeOutput {
	return o
}

// name of this partitioning scheme
func (o MeInstallationTemplatePartitionSchemeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *MeInstallationTemplatePartitionScheme) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// on a reinstall, if a partitioning scheme is not specified, the one with the higher priority will be used by default,
// among all the compatible partitioning schemes (given the underlying hardware specifications)
func (o MeInstallationTemplatePartitionSchemeOutput) Priority() pulumi.Float64Output {
	return o.ApplyT(func(v *MeInstallationTemplatePartitionScheme) pulumi.Float64Output { return v.Priority }).(pulumi.Float64Output)
}

// This template name
func (o MeInstallationTemplatePartitionSchemeOutput) TemplateName() pulumi.StringOutput {
	return o.ApplyT(func(v *MeInstallationTemplatePartitionScheme) pulumi.StringOutput { return v.TemplateName }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MeInstallationTemplatePartitionSchemeInput)(nil)).Elem(), &MeInstallationTemplatePartitionScheme{})
	pulumi.RegisterOutputType(MeInstallationTemplatePartitionSchemeOutput{})
}
